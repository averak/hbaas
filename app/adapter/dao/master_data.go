// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dao

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MasterDatum is an object representing the database table.
type MasterDatum struct {
	Revision  int       `boil:"revision" json:"revision" toml:"revision" yaml:"revision"`
	Content   []byte    `boil:"content" json:"content" toml:"content" yaml:"content"`
	IsActive  bool      `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	Comment   string    `boil:"comment" json:"comment" toml:"comment" yaml:"comment"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *masterDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L masterDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MasterDatumColumns = struct {
	Revision  string
	Content   string
	IsActive  string
	Comment   string
	CreatedAt string
	UpdatedAt string
}{
	Revision:  "revision",
	Content:   "content",
	IsActive:  "is_active",
	Comment:   "comment",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var MasterDatumTableColumns = struct {
	Revision  string
	Content   string
	IsActive  string
	Comment   string
	CreatedAt string
	UpdatedAt string
}{
	Revision:  "master_data.revision",
	Content:   "master_data.content",
	IsActive:  "master_data.is_active",
	Comment:   "master_data.comment",
	CreatedAt: "master_data.created_at",
	UpdatedAt: "master_data.updated_at",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var MasterDatumWhere = struct {
	Revision  whereHelperint
	Content   whereHelper__byte
	IsActive  whereHelperbool
	Comment   whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	Revision:  whereHelperint{field: "\"master_data\".\"revision\""},
	Content:   whereHelper__byte{field: "\"master_data\".\"content\""},
	IsActive:  whereHelperbool{field: "\"master_data\".\"is_active\""},
	Comment:   whereHelperstring{field: "\"master_data\".\"comment\""},
	CreatedAt: whereHelpertime_Time{field: "\"master_data\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"master_data\".\"updated_at\""},
}

// MasterDatumRels is where relationship names are stored.
var MasterDatumRels = struct {
}{}

// masterDatumR is where relationships are stored.
type masterDatumR struct {
}

// NewStruct creates a new relationship struct
func (*masterDatumR) NewStruct() *masterDatumR {
	return &masterDatumR{}
}

// masterDatumL is where Load methods for each relationship are stored.
type masterDatumL struct{}

var (
	masterDatumAllColumns            = []string{"revision", "content", "is_active", "comment", "created_at", "updated_at"}
	masterDatumColumnsWithoutDefault = []string{"revision", "content", "is_active", "comment", "created_at", "updated_at"}
	masterDatumColumnsWithDefault    = []string{}
	masterDatumPrimaryKeyColumns     = []string{"revision"}
	masterDatumGeneratedColumns      = []string{}
)

type (
	// MasterDatumSlice is an alias for a slice of pointers to MasterDatum.
	// This should almost always be used instead of []MasterDatum.
	MasterDatumSlice []*MasterDatum
	// MasterDatumHook is the signature for custom MasterDatum hook methods
	MasterDatumHook func(context.Context, boil.ContextExecutor, *MasterDatum) error

	masterDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	masterDatumType                 = reflect.TypeOf(&MasterDatum{})
	masterDatumMapping              = queries.MakeStructMapping(masterDatumType)
	masterDatumPrimaryKeyMapping, _ = queries.BindMapping(masterDatumType, masterDatumMapping, masterDatumPrimaryKeyColumns)
	masterDatumInsertCacheMut       sync.RWMutex
	masterDatumInsertCache          = make(map[string]insertCache)
	masterDatumUpdateCacheMut       sync.RWMutex
	masterDatumUpdateCache          = make(map[string]updateCache)
	masterDatumUpsertCacheMut       sync.RWMutex
	masterDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var masterDatumAfterSelectMu sync.Mutex
var masterDatumAfterSelectHooks []MasterDatumHook

var masterDatumBeforeInsertMu sync.Mutex
var masterDatumBeforeInsertHooks []MasterDatumHook
var masterDatumAfterInsertMu sync.Mutex
var masterDatumAfterInsertHooks []MasterDatumHook

var masterDatumBeforeUpdateMu sync.Mutex
var masterDatumBeforeUpdateHooks []MasterDatumHook
var masterDatumAfterUpdateMu sync.Mutex
var masterDatumAfterUpdateHooks []MasterDatumHook

var masterDatumBeforeDeleteMu sync.Mutex
var masterDatumBeforeDeleteHooks []MasterDatumHook
var masterDatumAfterDeleteMu sync.Mutex
var masterDatumAfterDeleteHooks []MasterDatumHook

var masterDatumBeforeUpsertMu sync.Mutex
var masterDatumBeforeUpsertHooks []MasterDatumHook
var masterDatumAfterUpsertMu sync.Mutex
var masterDatumAfterUpsertHooks []MasterDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MasterDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range masterDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MasterDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range masterDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MasterDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range masterDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MasterDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range masterDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MasterDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range masterDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MasterDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range masterDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MasterDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range masterDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MasterDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range masterDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MasterDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range masterDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMasterDatumHook registers your hook function for all future operations.
func AddMasterDatumHook(hookPoint boil.HookPoint, masterDatumHook MasterDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		masterDatumAfterSelectMu.Lock()
		masterDatumAfterSelectHooks = append(masterDatumAfterSelectHooks, masterDatumHook)
		masterDatumAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		masterDatumBeforeInsertMu.Lock()
		masterDatumBeforeInsertHooks = append(masterDatumBeforeInsertHooks, masterDatumHook)
		masterDatumBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		masterDatumAfterInsertMu.Lock()
		masterDatumAfterInsertHooks = append(masterDatumAfterInsertHooks, masterDatumHook)
		masterDatumAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		masterDatumBeforeUpdateMu.Lock()
		masterDatumBeforeUpdateHooks = append(masterDatumBeforeUpdateHooks, masterDatumHook)
		masterDatumBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		masterDatumAfterUpdateMu.Lock()
		masterDatumAfterUpdateHooks = append(masterDatumAfterUpdateHooks, masterDatumHook)
		masterDatumAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		masterDatumBeforeDeleteMu.Lock()
		masterDatumBeforeDeleteHooks = append(masterDatumBeforeDeleteHooks, masterDatumHook)
		masterDatumBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		masterDatumAfterDeleteMu.Lock()
		masterDatumAfterDeleteHooks = append(masterDatumAfterDeleteHooks, masterDatumHook)
		masterDatumAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		masterDatumBeforeUpsertMu.Lock()
		masterDatumBeforeUpsertHooks = append(masterDatumBeforeUpsertHooks, masterDatumHook)
		masterDatumBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		masterDatumAfterUpsertMu.Lock()
		masterDatumAfterUpsertHooks = append(masterDatumAfterUpsertHooks, masterDatumHook)
		masterDatumAfterUpsertMu.Unlock()
	}
}

// One returns a single masterDatum record from the query.
func (q masterDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MasterDatum, error) {
	o := &MasterDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dao: failed to execute a one query for master_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MasterDatum records from the query.
func (q masterDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (MasterDatumSlice, error) {
	var o []*MasterDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dao: failed to assign all query results to MasterDatum slice")
	}

	if len(masterDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MasterDatum records in the query.
func (q masterDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to count master_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q masterDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dao: failed to check if master_data exists")
	}

	return count > 0, nil
}

// MasterData retrieves all the records using an executor.
func MasterData(mods ...qm.QueryMod) masterDatumQuery {
	mods = append(mods, qm.From("\"master_data\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"master_data\".*"})
	}

	return masterDatumQuery{q}
}

// FindMasterDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMasterDatum(ctx context.Context, exec boil.ContextExecutor, revision int, selectCols ...string) (*MasterDatum, error) {
	masterDatumObj := &MasterDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"master_data\" where \"revision\"=$1", sel,
	)

	q := queries.Raw(query, revision)

	err := q.Bind(ctx, exec, masterDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dao: unable to select from master_data")
	}

	if err = masterDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return masterDatumObj, err
	}

	return masterDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MasterDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dao: no master_data provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(masterDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	masterDatumInsertCacheMut.RLock()
	cache, cached := masterDatumInsertCache[key]
	masterDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			masterDatumAllColumns,
			masterDatumColumnsWithDefault,
			masterDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(masterDatumType, masterDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(masterDatumType, masterDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"master_data\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"master_data\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dao: unable to insert into master_data")
	}

	if !cached {
		masterDatumInsertCacheMut.Lock()
		masterDatumInsertCache[key] = cache
		masterDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MasterDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MasterDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	masterDatumUpdateCacheMut.RLock()
	cache, cached := masterDatumUpdateCache[key]
	masterDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			masterDatumAllColumns,
			masterDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dao: unable to update master_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"master_data\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, masterDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(masterDatumType, masterDatumMapping, append(wl, masterDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update master_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by update for master_data")
	}

	if !cached {
		masterDatumUpdateCacheMut.Lock()
		masterDatumUpdateCache[key] = cache
		masterDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q masterDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update all for master_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to retrieve rows affected for master_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MasterDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dao: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), masterDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"master_data\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, masterDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update all in masterDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to retrieve rows affected all in update all masterDatum")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MasterDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dao: no master_data provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(masterDatumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	masterDatumUpsertCacheMut.RLock()
	cache, cached := masterDatumUpsertCache[key]
	masterDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			masterDatumAllColumns,
			masterDatumColumnsWithDefault,
			masterDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			masterDatumAllColumns,
			masterDatumPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dao: unable to upsert master_data, could not build update column list")
		}

		ret := strmangle.SetComplement(masterDatumAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(masterDatumPrimaryKeyColumns) == 0 {
				return errors.New("dao: unable to upsert master_data, could not build conflict column list")
			}

			conflict = make([]string, len(masterDatumPrimaryKeyColumns))
			copy(conflict, masterDatumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"master_data\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(masterDatumType, masterDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(masterDatumType, masterDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dao: unable to upsert master_data")
	}

	if !cached {
		masterDatumUpsertCacheMut.Lock()
		masterDatumUpsertCache[key] = cache
		masterDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MasterDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MasterDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dao: no MasterDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), masterDatumPrimaryKeyMapping)
	sql := "DELETE FROM \"master_data\" WHERE \"revision\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete from master_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by delete for master_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q masterDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dao: no masterDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete all from master_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by deleteall for master_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MasterDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(masterDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), masterDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"master_data\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, masterDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete all from masterDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by deleteall for master_data")
	}

	if len(masterDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MasterDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMasterDatum(ctx, exec, o.Revision)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MasterDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MasterDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), masterDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"master_data\".* FROM \"master_data\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, masterDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dao: unable to reload all in MasterDatumSlice")
	}

	*o = slice

	return nil
}

// MasterDatumExists checks if the MasterDatum row exists.
func MasterDatumExists(ctx context.Context, exec boil.ContextExecutor, revision int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"master_data\" where \"revision\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, revision)
	}
	row := exec.QueryRowContext(ctx, sql, revision)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dao: unable to check if master_data exists")
	}

	return exists, nil
}

// Exists checks if the MasterDatum row exists.
func (o *MasterDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MasterDatumExists(ctx, exec, o.Revision)
}

// /////////////////////////////// BEGIN EXTENSIONS /////////////////////////////////
// Expose table columns
var (
	MasterDatumAllColumns            = masterDatumAllColumns
	MasterDatumColumnsWithoutDefault = masterDatumColumnsWithoutDefault
	MasterDatumColumnsWithDefault    = masterDatumColumnsWithDefault
	MasterDatumPrimaryKeyColumns     = masterDatumPrimaryKeyColumns
	MasterDatumGeneratedColumns      = masterDatumGeneratedColumns
)

// InsertAll inserts all rows with the specified column values, using an executor.
func (o MasterDatumSlice) InsertAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var sql string
	vals := []interface{}{}
	for i, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}
			if row.UpdatedAt.IsZero() {
				row.UpdatedAt = currTime
			}
		}

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		wl, _ := columns.InsertColumnSet(
			masterDatumAllColumns,
			masterDatumColumnsWithDefault,
			masterDatumColumnsWithoutDefault,
			queries.NonZeroDefaultSet(masterDatumColumnsWithDefault, row),
		)
		if i == 0 {
			sql = "INSERT INTO \"master_data\" " + "(\"" + strings.Join(wl, "\",\"") + "\")" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(masterDatumType, masterDatumMapping, wl)
		if err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to insert all from masterDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by insertall for master_data")
	}

	if len(masterDatumAfterInsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterInsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// UpsertAll inserts or updates all rows
// Currently it doesn't support "NoContext" and "NoRowsAffected"
func (o MasterDatumSlice) UpsertAll(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	nzDefaults := queries.NonZeroDefaultSet(masterDatumColumnsWithDefault, o[0])

	insert, _ := insertColumns.InsertColumnSet(
		masterDatumAllColumns,
		masterDatumColumnsWithDefault,
		masterDatumColumnsWithoutDefault,
		nzDefaults,
	)
	update := updateColumns.UpdateColumnSet(
		masterDatumAllColumns,
		masterDatumPrimaryKeyColumns,
	)

	if updateOnConflict && len(update) == 0 {
		return 0, errors.New("dao: unable to upsert master_data, could not build update column list")
	}

	conflict := conflictColumns
	if len(conflict) == 0 {
		conflict = make([]string, len(masterDatumPrimaryKeyColumns))
		copy(conflict, masterDatumPrimaryKeyColumns)
	}

	buf := strmangle.GetBuffer()
	defer strmangle.PutBuffer(buf)

	columns := "DEFAULT VALUES"
	if len(insert) != 0 {
		columns = fmt.Sprintf("(%s) VALUES %s",
			strings.Join(insert, ", "),
			strmangle.Placeholders(dialect.UseIndexPlaceholders, len(insert)*len(o), 1, len(insert)),
		)
	}

	fmt.Fprintf(
		buf,
		"INSERT INTO %s %s ON CONFLICT ",
		"\"master_data\"",
		columns,
	)

	if !updateOnConflict || len(update) == 0 {
		buf.WriteString("DO NOTHING")
	} else {
		buf.WriteByte('(')
		buf.WriteString(strings.Join(conflict, ", "))
		buf.WriteString(") DO UPDATE SET ")

		for i, v := range update {
			if i != 0 {
				buf.WriteByte(',')
			}
			quoted := strmangle.IdentQuote(dialect.LQ, dialect.RQ, v)
			buf.WriteString(quoted)
			buf.WriteString(" = EXCLUDED.")
			buf.WriteString(quoted)
		}
	}

	query := buf.String()
	valueMapping, err := queries.BindMapping(masterDatumType, masterDatumMapping, insert)
	if err != nil {
		return 0, err
	}

	var vals []interface{}
	for _, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}

			row.UpdatedAt = currTime
		}

		if err := row.doBeforeUpsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valueMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, query, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to upsert for master_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by upsert for master_data")
	}

	if len(masterDatumAfterUpsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterUpsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

///////////////////////////////// END EXTENSIONS /////////////////////////////////
