// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dao

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// LeaderBoardScore is an object representing the database table.
type LeaderBoardScore struct {
	LeaderBoardID string    `boil:"leader_board_id" json:"leader_board_id" toml:"leader_board_id" yaml:"leader_board_id"`
	ScoreID       string    `boil:"score_id" json:"score_id" toml:"score_id" yaml:"score_id"`
	Score         int       `boil:"score" json:"score" toml:"score" yaml:"score"`
	Timestamp     time.Time `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *leaderBoardScoreR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L leaderBoardScoreL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LeaderBoardScoreColumns = struct {
	LeaderBoardID string
	ScoreID       string
	Score         string
	Timestamp     string
	CreatedAt     string
	UpdatedAt     string
}{
	LeaderBoardID: "leader_board_id",
	ScoreID:       "score_id",
	Score:         "score",
	Timestamp:     "timestamp",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

var LeaderBoardScoreTableColumns = struct {
	LeaderBoardID string
	ScoreID       string
	Score         string
	Timestamp     string
	CreatedAt     string
	UpdatedAt     string
}{
	LeaderBoardID: "leader_board_scores.leader_board_id",
	ScoreID:       "leader_board_scores.score_id",
	Score:         "leader_board_scores.score",
	Timestamp:     "leader_board_scores.timestamp",
	CreatedAt:     "leader_board_scores.created_at",
	UpdatedAt:     "leader_board_scores.updated_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var LeaderBoardScoreWhere = struct {
	LeaderBoardID whereHelperstring
	ScoreID       whereHelperstring
	Score         whereHelperint
	Timestamp     whereHelpertime_Time
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
}{
	LeaderBoardID: whereHelperstring{field: "\"leader_board_scores\".\"leader_board_id\""},
	ScoreID:       whereHelperstring{field: "\"leader_board_scores\".\"score_id\""},
	Score:         whereHelperint{field: "\"leader_board_scores\".\"score\""},
	Timestamp:     whereHelpertime_Time{field: "\"leader_board_scores\".\"timestamp\""},
	CreatedAt:     whereHelpertime_Time{field: "\"leader_board_scores\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"leader_board_scores\".\"updated_at\""},
}

// LeaderBoardScoreRels is where relationship names are stored.
var LeaderBoardScoreRels = struct {
	LeaderBoard string
}{
	LeaderBoard: "LeaderBoard",
}

// leaderBoardScoreR is where relationships are stored.
type leaderBoardScoreR struct {
	LeaderBoard *LeaderBoard `boil:"LeaderBoard" json:"LeaderBoard" toml:"LeaderBoard" yaml:"LeaderBoard"`
}

// NewStruct creates a new relationship struct
func (*leaderBoardScoreR) NewStruct() *leaderBoardScoreR {
	return &leaderBoardScoreR{}
}

func (r *leaderBoardScoreR) GetLeaderBoard() *LeaderBoard {
	if r == nil {
		return nil
	}
	return r.LeaderBoard
}

// leaderBoardScoreL is where Load methods for each relationship are stored.
type leaderBoardScoreL struct{}

var (
	leaderBoardScoreAllColumns            = []string{"leader_board_id", "score_id", "score", "timestamp", "created_at", "updated_at"}
	leaderBoardScoreColumnsWithoutDefault = []string{"leader_board_id", "score_id", "score", "timestamp", "created_at", "updated_at"}
	leaderBoardScoreColumnsWithDefault    = []string{}
	leaderBoardScorePrimaryKeyColumns     = []string{"leader_board_id", "score_id"}
	leaderBoardScoreGeneratedColumns      = []string{}
)

type (
	// LeaderBoardScoreSlice is an alias for a slice of pointers to LeaderBoardScore.
	// This should almost always be used instead of []LeaderBoardScore.
	LeaderBoardScoreSlice []*LeaderBoardScore
	// LeaderBoardScoreHook is the signature for custom LeaderBoardScore hook methods
	LeaderBoardScoreHook func(context.Context, boil.ContextExecutor, *LeaderBoardScore) error

	leaderBoardScoreQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	leaderBoardScoreType                 = reflect.TypeOf(&LeaderBoardScore{})
	leaderBoardScoreMapping              = queries.MakeStructMapping(leaderBoardScoreType)
	leaderBoardScorePrimaryKeyMapping, _ = queries.BindMapping(leaderBoardScoreType, leaderBoardScoreMapping, leaderBoardScorePrimaryKeyColumns)
	leaderBoardScoreInsertCacheMut       sync.RWMutex
	leaderBoardScoreInsertCache          = make(map[string]insertCache)
	leaderBoardScoreUpdateCacheMut       sync.RWMutex
	leaderBoardScoreUpdateCache          = make(map[string]updateCache)
	leaderBoardScoreUpsertCacheMut       sync.RWMutex
	leaderBoardScoreUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var leaderBoardScoreAfterSelectMu sync.Mutex
var leaderBoardScoreAfterSelectHooks []LeaderBoardScoreHook

var leaderBoardScoreBeforeInsertMu sync.Mutex
var leaderBoardScoreBeforeInsertHooks []LeaderBoardScoreHook
var leaderBoardScoreAfterInsertMu sync.Mutex
var leaderBoardScoreAfterInsertHooks []LeaderBoardScoreHook

var leaderBoardScoreBeforeUpdateMu sync.Mutex
var leaderBoardScoreBeforeUpdateHooks []LeaderBoardScoreHook
var leaderBoardScoreAfterUpdateMu sync.Mutex
var leaderBoardScoreAfterUpdateHooks []LeaderBoardScoreHook

var leaderBoardScoreBeforeDeleteMu sync.Mutex
var leaderBoardScoreBeforeDeleteHooks []LeaderBoardScoreHook
var leaderBoardScoreAfterDeleteMu sync.Mutex
var leaderBoardScoreAfterDeleteHooks []LeaderBoardScoreHook

var leaderBoardScoreBeforeUpsertMu sync.Mutex
var leaderBoardScoreBeforeUpsertHooks []LeaderBoardScoreHook
var leaderBoardScoreAfterUpsertMu sync.Mutex
var leaderBoardScoreAfterUpsertHooks []LeaderBoardScoreHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LeaderBoardScore) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leaderBoardScoreAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LeaderBoardScore) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leaderBoardScoreBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LeaderBoardScore) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leaderBoardScoreAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LeaderBoardScore) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leaderBoardScoreBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LeaderBoardScore) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leaderBoardScoreAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LeaderBoardScore) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leaderBoardScoreBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LeaderBoardScore) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leaderBoardScoreAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LeaderBoardScore) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leaderBoardScoreBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LeaderBoardScore) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leaderBoardScoreAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLeaderBoardScoreHook registers your hook function for all future operations.
func AddLeaderBoardScoreHook(hookPoint boil.HookPoint, leaderBoardScoreHook LeaderBoardScoreHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		leaderBoardScoreAfterSelectMu.Lock()
		leaderBoardScoreAfterSelectHooks = append(leaderBoardScoreAfterSelectHooks, leaderBoardScoreHook)
		leaderBoardScoreAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		leaderBoardScoreBeforeInsertMu.Lock()
		leaderBoardScoreBeforeInsertHooks = append(leaderBoardScoreBeforeInsertHooks, leaderBoardScoreHook)
		leaderBoardScoreBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		leaderBoardScoreAfterInsertMu.Lock()
		leaderBoardScoreAfterInsertHooks = append(leaderBoardScoreAfterInsertHooks, leaderBoardScoreHook)
		leaderBoardScoreAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		leaderBoardScoreBeforeUpdateMu.Lock()
		leaderBoardScoreBeforeUpdateHooks = append(leaderBoardScoreBeforeUpdateHooks, leaderBoardScoreHook)
		leaderBoardScoreBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		leaderBoardScoreAfterUpdateMu.Lock()
		leaderBoardScoreAfterUpdateHooks = append(leaderBoardScoreAfterUpdateHooks, leaderBoardScoreHook)
		leaderBoardScoreAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		leaderBoardScoreBeforeDeleteMu.Lock()
		leaderBoardScoreBeforeDeleteHooks = append(leaderBoardScoreBeforeDeleteHooks, leaderBoardScoreHook)
		leaderBoardScoreBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		leaderBoardScoreAfterDeleteMu.Lock()
		leaderBoardScoreAfterDeleteHooks = append(leaderBoardScoreAfterDeleteHooks, leaderBoardScoreHook)
		leaderBoardScoreAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		leaderBoardScoreBeforeUpsertMu.Lock()
		leaderBoardScoreBeforeUpsertHooks = append(leaderBoardScoreBeforeUpsertHooks, leaderBoardScoreHook)
		leaderBoardScoreBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		leaderBoardScoreAfterUpsertMu.Lock()
		leaderBoardScoreAfterUpsertHooks = append(leaderBoardScoreAfterUpsertHooks, leaderBoardScoreHook)
		leaderBoardScoreAfterUpsertMu.Unlock()
	}
}

// One returns a single leaderBoardScore record from the query.
func (q leaderBoardScoreQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LeaderBoardScore, error) {
	o := &LeaderBoardScore{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dao: failed to execute a one query for leader_board_scores")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all LeaderBoardScore records from the query.
func (q leaderBoardScoreQuery) All(ctx context.Context, exec boil.ContextExecutor) (LeaderBoardScoreSlice, error) {
	var o []*LeaderBoardScore

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dao: failed to assign all query results to LeaderBoardScore slice")
	}

	if len(leaderBoardScoreAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all LeaderBoardScore records in the query.
func (q leaderBoardScoreQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to count leader_board_scores rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q leaderBoardScoreQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dao: failed to check if leader_board_scores exists")
	}

	return count > 0, nil
}

// LeaderBoard pointed to by the foreign key.
func (o *LeaderBoardScore) LeaderBoard(mods ...qm.QueryMod) leaderBoardQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LeaderBoardID),
	}

	queryMods = append(queryMods, mods...)

	return LeaderBoards(queryMods...)
}

// LoadLeaderBoard allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (leaderBoardScoreL) LoadLeaderBoard(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLeaderBoardScore interface{}, mods queries.Applicator) error {
	var slice []*LeaderBoardScore
	var object *LeaderBoardScore

	if singular {
		var ok bool
		object, ok = maybeLeaderBoardScore.(*LeaderBoardScore)
		if !ok {
			object = new(LeaderBoardScore)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLeaderBoardScore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLeaderBoardScore))
			}
		}
	} else {
		s, ok := maybeLeaderBoardScore.(*[]*LeaderBoardScore)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLeaderBoardScore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLeaderBoardScore))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &leaderBoardScoreR{}
		}
		args[object.LeaderBoardID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &leaderBoardScoreR{}
			}

			args[obj.LeaderBoardID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`leader_board`),
		qm.WhereIn(`leader_board.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load LeaderBoard")
	}

	var resultSlice []*LeaderBoard
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice LeaderBoard")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for leader_board")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for leader_board")
	}

	if len(leaderBoardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LeaderBoard = foreign
		if foreign.R == nil {
			foreign.R = &leaderBoardR{}
		}
		foreign.R.LeaderBoardScores = append(foreign.R.LeaderBoardScores, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LeaderBoardID == foreign.ID {
				local.R.LeaderBoard = foreign
				if foreign.R == nil {
					foreign.R = &leaderBoardR{}
				}
				foreign.R.LeaderBoardScores = append(foreign.R.LeaderBoardScores, local)
				break
			}
		}
	}

	return nil
}

// SetLeaderBoard of the leaderBoardScore to the related item.
// Sets o.R.LeaderBoard to related.
// Adds o to related.R.LeaderBoardScores.
func (o *LeaderBoardScore) SetLeaderBoard(ctx context.Context, exec boil.ContextExecutor, insert bool, related *LeaderBoard) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"leader_board_scores\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"leader_board_id"}),
		strmangle.WhereClause("\"", "\"", 2, leaderBoardScorePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.LeaderBoardID, o.ScoreID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LeaderBoardID = related.ID
	if o.R == nil {
		o.R = &leaderBoardScoreR{
			LeaderBoard: related,
		}
	} else {
		o.R.LeaderBoard = related
	}

	if related.R == nil {
		related.R = &leaderBoardR{
			LeaderBoardScores: LeaderBoardScoreSlice{o},
		}
	} else {
		related.R.LeaderBoardScores = append(related.R.LeaderBoardScores, o)
	}

	return nil
}

// LeaderBoardScores retrieves all the records using an executor.
func LeaderBoardScores(mods ...qm.QueryMod) leaderBoardScoreQuery {
	mods = append(mods, qm.From("\"leader_board_scores\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"leader_board_scores\".*"})
	}

	return leaderBoardScoreQuery{q}
}

// FindLeaderBoardScore retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLeaderBoardScore(ctx context.Context, exec boil.ContextExecutor, leaderBoardID string, scoreID string, selectCols ...string) (*LeaderBoardScore, error) {
	leaderBoardScoreObj := &LeaderBoardScore{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"leader_board_scores\" where \"leader_board_id\"=$1 AND \"score_id\"=$2", sel,
	)

	q := queries.Raw(query, leaderBoardID, scoreID)

	err := q.Bind(ctx, exec, leaderBoardScoreObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dao: unable to select from leader_board_scores")
	}

	if err = leaderBoardScoreObj.doAfterSelectHooks(ctx, exec); err != nil {
		return leaderBoardScoreObj, err
	}

	return leaderBoardScoreObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LeaderBoardScore) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dao: no leader_board_scores provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(leaderBoardScoreColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	leaderBoardScoreInsertCacheMut.RLock()
	cache, cached := leaderBoardScoreInsertCache[key]
	leaderBoardScoreInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			leaderBoardScoreAllColumns,
			leaderBoardScoreColumnsWithDefault,
			leaderBoardScoreColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(leaderBoardScoreType, leaderBoardScoreMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(leaderBoardScoreType, leaderBoardScoreMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"leader_board_scores\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"leader_board_scores\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dao: unable to insert into leader_board_scores")
	}

	if !cached {
		leaderBoardScoreInsertCacheMut.Lock()
		leaderBoardScoreInsertCache[key] = cache
		leaderBoardScoreInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the LeaderBoardScore.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LeaderBoardScore) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	leaderBoardScoreUpdateCacheMut.RLock()
	cache, cached := leaderBoardScoreUpdateCache[key]
	leaderBoardScoreUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			leaderBoardScoreAllColumns,
			leaderBoardScorePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dao: unable to update leader_board_scores, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"leader_board_scores\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, leaderBoardScorePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(leaderBoardScoreType, leaderBoardScoreMapping, append(wl, leaderBoardScorePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update leader_board_scores row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by update for leader_board_scores")
	}

	if !cached {
		leaderBoardScoreUpdateCacheMut.Lock()
		leaderBoardScoreUpdateCache[key] = cache
		leaderBoardScoreUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q leaderBoardScoreQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update all for leader_board_scores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to retrieve rows affected for leader_board_scores")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LeaderBoardScoreSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dao: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), leaderBoardScorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"leader_board_scores\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, leaderBoardScorePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update all in leaderBoardScore slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to retrieve rows affected all in update all leaderBoardScore")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LeaderBoardScore) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dao: no leader_board_scores provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(leaderBoardScoreColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	leaderBoardScoreUpsertCacheMut.RLock()
	cache, cached := leaderBoardScoreUpsertCache[key]
	leaderBoardScoreUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			leaderBoardScoreAllColumns,
			leaderBoardScoreColumnsWithDefault,
			leaderBoardScoreColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			leaderBoardScoreAllColumns,
			leaderBoardScorePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dao: unable to upsert leader_board_scores, could not build update column list")
		}

		ret := strmangle.SetComplement(leaderBoardScoreAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(leaderBoardScorePrimaryKeyColumns) == 0 {
				return errors.New("dao: unable to upsert leader_board_scores, could not build conflict column list")
			}

			conflict = make([]string, len(leaderBoardScorePrimaryKeyColumns))
			copy(conflict, leaderBoardScorePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"leader_board_scores\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(leaderBoardScoreType, leaderBoardScoreMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(leaderBoardScoreType, leaderBoardScoreMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dao: unable to upsert leader_board_scores")
	}

	if !cached {
		leaderBoardScoreUpsertCacheMut.Lock()
		leaderBoardScoreUpsertCache[key] = cache
		leaderBoardScoreUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single LeaderBoardScore record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LeaderBoardScore) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dao: no LeaderBoardScore provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), leaderBoardScorePrimaryKeyMapping)
	sql := "DELETE FROM \"leader_board_scores\" WHERE \"leader_board_id\"=$1 AND \"score_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete from leader_board_scores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by delete for leader_board_scores")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q leaderBoardScoreQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dao: no leaderBoardScoreQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete all from leader_board_scores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by deleteall for leader_board_scores")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LeaderBoardScoreSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(leaderBoardScoreBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), leaderBoardScorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"leader_board_scores\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, leaderBoardScorePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete all from leaderBoardScore slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by deleteall for leader_board_scores")
	}

	if len(leaderBoardScoreAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LeaderBoardScore) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLeaderBoardScore(ctx, exec, o.LeaderBoardID, o.ScoreID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LeaderBoardScoreSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LeaderBoardScoreSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), leaderBoardScorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"leader_board_scores\".* FROM \"leader_board_scores\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, leaderBoardScorePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dao: unable to reload all in LeaderBoardScoreSlice")
	}

	*o = slice

	return nil
}

// LeaderBoardScoreExists checks if the LeaderBoardScore row exists.
func LeaderBoardScoreExists(ctx context.Context, exec boil.ContextExecutor, leaderBoardID string, scoreID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"leader_board_scores\" where \"leader_board_id\"=$1 AND \"score_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, leaderBoardID, scoreID)
	}
	row := exec.QueryRowContext(ctx, sql, leaderBoardID, scoreID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dao: unable to check if leader_board_scores exists")
	}

	return exists, nil
}

// Exists checks if the LeaderBoardScore row exists.
func (o *LeaderBoardScore) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return LeaderBoardScoreExists(ctx, exec, o.LeaderBoardID, o.ScoreID)
}

// /////////////////////////////// BEGIN EXTENSIONS /////////////////////////////////
// Expose table columns
var (
	LeaderBoardScoreAllColumns            = leaderBoardScoreAllColumns
	LeaderBoardScoreColumnsWithoutDefault = leaderBoardScoreColumnsWithoutDefault
	LeaderBoardScoreColumnsWithDefault    = leaderBoardScoreColumnsWithDefault
	LeaderBoardScorePrimaryKeyColumns     = leaderBoardScorePrimaryKeyColumns
	LeaderBoardScoreGeneratedColumns      = leaderBoardScoreGeneratedColumns
)

// InsertAll inserts all rows with the specified column values, using an executor.
func (o LeaderBoardScoreSlice) InsertAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var sql string
	vals := []interface{}{}
	for i, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}
			if row.UpdatedAt.IsZero() {
				row.UpdatedAt = currTime
			}
		}

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		wl, _ := columns.InsertColumnSet(
			leaderBoardScoreAllColumns,
			leaderBoardScoreColumnsWithDefault,
			leaderBoardScoreColumnsWithoutDefault,
			queries.NonZeroDefaultSet(leaderBoardScoreColumnsWithDefault, row),
		)
		if i == 0 {
			sql = "INSERT INTO \"leader_board_scores\" " + "(\"" + strings.Join(wl, "\",\"") + "\")" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(leaderBoardScoreType, leaderBoardScoreMapping, wl)
		if err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to insert all from leaderBoardScore slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by insertall for leader_board_scores")
	}

	if len(leaderBoardScoreAfterInsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterInsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// UpsertAll inserts or updates all rows
// Currently it doesn't support "NoContext" and "NoRowsAffected"
func (o LeaderBoardScoreSlice) UpsertAll(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	nzDefaults := queries.NonZeroDefaultSet(leaderBoardScoreColumnsWithDefault, o[0])

	insert, _ := insertColumns.InsertColumnSet(
		leaderBoardScoreAllColumns,
		leaderBoardScoreColumnsWithDefault,
		leaderBoardScoreColumnsWithoutDefault,
		nzDefaults,
	)
	update := updateColumns.UpdateColumnSet(
		leaderBoardScoreAllColumns,
		leaderBoardScorePrimaryKeyColumns,
	)

	if updateOnConflict && len(update) == 0 {
		return 0, errors.New("dao: unable to upsert leader_board_scores, could not build update column list")
	}

	conflict := conflictColumns
	if len(conflict) == 0 {
		conflict = make([]string, len(leaderBoardScorePrimaryKeyColumns))
		copy(conflict, leaderBoardScorePrimaryKeyColumns)
	}

	buf := strmangle.GetBuffer()
	defer strmangle.PutBuffer(buf)

	columns := "DEFAULT VALUES"
	if len(insert) != 0 {
		columns = fmt.Sprintf("(%s) VALUES %s",
			strings.Join(insert, ", "),
			strmangle.Placeholders(dialect.UseIndexPlaceholders, len(insert)*len(o), 1, len(insert)),
		)
	}

	fmt.Fprintf(
		buf,
		"INSERT INTO %s %s ON CONFLICT ",
		"\"leader_board_scores\"",
		columns,
	)

	if !updateOnConflict || len(update) == 0 {
		buf.WriteString("DO NOTHING")
	} else {
		buf.WriteByte('(')
		buf.WriteString(strings.Join(conflict, ", "))
		buf.WriteString(") DO UPDATE SET ")

		for i, v := range update {
			if i != 0 {
				buf.WriteByte(',')
			}
			quoted := strmangle.IdentQuote(dialect.LQ, dialect.RQ, v)
			buf.WriteString(quoted)
			buf.WriteString(" = EXCLUDED.")
			buf.WriteString(quoted)
		}
	}

	query := buf.String()
	valueMapping, err := queries.BindMapping(leaderBoardScoreType, leaderBoardScoreMapping, insert)
	if err != nil {
		return 0, err
	}

	var vals []interface{}
	for _, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}

			row.UpdatedAt = currTime
		}

		if err := row.doBeforeUpsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valueMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, query, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to upsert for leader_board_scores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by upsert for leader_board_scores")
	}

	if len(leaderBoardScoreAfterUpsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterUpsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

///////////////////////////////// END EXTENSIONS /////////////////////////////////
