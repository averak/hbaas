// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dao

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// LeaderBoard is an object representing the database table.
type LeaderBoard struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *leaderBoardR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L leaderBoardL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LeaderBoardColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var LeaderBoardTableColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "leader_board.id",
	CreatedAt: "leader_board.created_at",
	UpdatedAt: "leader_board.updated_at",
}

// Generated where

var LeaderBoardWhere = struct {
	ID        whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"leader_board\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"leader_board\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"leader_board\".\"updated_at\""},
}

// LeaderBoardRels is where relationship names are stored.
var LeaderBoardRels = struct {
	LeaderBoardScores string
}{
	LeaderBoardScores: "LeaderBoardScores",
}

// leaderBoardR is where relationships are stored.
type leaderBoardR struct {
	LeaderBoardScores LeaderBoardScoreSlice `boil:"LeaderBoardScores" json:"LeaderBoardScores" toml:"LeaderBoardScores" yaml:"LeaderBoardScores"`
}

// NewStruct creates a new relationship struct
func (*leaderBoardR) NewStruct() *leaderBoardR {
	return &leaderBoardR{}
}

func (r *leaderBoardR) GetLeaderBoardScores() LeaderBoardScoreSlice {
	if r == nil {
		return nil
	}
	return r.LeaderBoardScores
}

// leaderBoardL is where Load methods for each relationship are stored.
type leaderBoardL struct{}

var (
	leaderBoardAllColumns            = []string{"id", "created_at", "updated_at"}
	leaderBoardColumnsWithoutDefault = []string{"id", "created_at", "updated_at"}
	leaderBoardColumnsWithDefault    = []string{}
	leaderBoardPrimaryKeyColumns     = []string{"id"}
	leaderBoardGeneratedColumns      = []string{}
)

type (
	// LeaderBoardSlice is an alias for a slice of pointers to LeaderBoard.
	// This should almost always be used instead of []LeaderBoard.
	LeaderBoardSlice []*LeaderBoard
	// LeaderBoardHook is the signature for custom LeaderBoard hook methods
	LeaderBoardHook func(context.Context, boil.ContextExecutor, *LeaderBoard) error

	leaderBoardQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	leaderBoardType                 = reflect.TypeOf(&LeaderBoard{})
	leaderBoardMapping              = queries.MakeStructMapping(leaderBoardType)
	leaderBoardPrimaryKeyMapping, _ = queries.BindMapping(leaderBoardType, leaderBoardMapping, leaderBoardPrimaryKeyColumns)
	leaderBoardInsertCacheMut       sync.RWMutex
	leaderBoardInsertCache          = make(map[string]insertCache)
	leaderBoardUpdateCacheMut       sync.RWMutex
	leaderBoardUpdateCache          = make(map[string]updateCache)
	leaderBoardUpsertCacheMut       sync.RWMutex
	leaderBoardUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var leaderBoardAfterSelectMu sync.Mutex
var leaderBoardAfterSelectHooks []LeaderBoardHook

var leaderBoardBeforeInsertMu sync.Mutex
var leaderBoardBeforeInsertHooks []LeaderBoardHook
var leaderBoardAfterInsertMu sync.Mutex
var leaderBoardAfterInsertHooks []LeaderBoardHook

var leaderBoardBeforeUpdateMu sync.Mutex
var leaderBoardBeforeUpdateHooks []LeaderBoardHook
var leaderBoardAfterUpdateMu sync.Mutex
var leaderBoardAfterUpdateHooks []LeaderBoardHook

var leaderBoardBeforeDeleteMu sync.Mutex
var leaderBoardBeforeDeleteHooks []LeaderBoardHook
var leaderBoardAfterDeleteMu sync.Mutex
var leaderBoardAfterDeleteHooks []LeaderBoardHook

var leaderBoardBeforeUpsertMu sync.Mutex
var leaderBoardBeforeUpsertHooks []LeaderBoardHook
var leaderBoardAfterUpsertMu sync.Mutex
var leaderBoardAfterUpsertHooks []LeaderBoardHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LeaderBoard) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leaderBoardAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LeaderBoard) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leaderBoardBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LeaderBoard) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leaderBoardAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LeaderBoard) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leaderBoardBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LeaderBoard) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leaderBoardAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LeaderBoard) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leaderBoardBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LeaderBoard) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leaderBoardAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LeaderBoard) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leaderBoardBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LeaderBoard) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leaderBoardAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLeaderBoardHook registers your hook function for all future operations.
func AddLeaderBoardHook(hookPoint boil.HookPoint, leaderBoardHook LeaderBoardHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		leaderBoardAfterSelectMu.Lock()
		leaderBoardAfterSelectHooks = append(leaderBoardAfterSelectHooks, leaderBoardHook)
		leaderBoardAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		leaderBoardBeforeInsertMu.Lock()
		leaderBoardBeforeInsertHooks = append(leaderBoardBeforeInsertHooks, leaderBoardHook)
		leaderBoardBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		leaderBoardAfterInsertMu.Lock()
		leaderBoardAfterInsertHooks = append(leaderBoardAfterInsertHooks, leaderBoardHook)
		leaderBoardAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		leaderBoardBeforeUpdateMu.Lock()
		leaderBoardBeforeUpdateHooks = append(leaderBoardBeforeUpdateHooks, leaderBoardHook)
		leaderBoardBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		leaderBoardAfterUpdateMu.Lock()
		leaderBoardAfterUpdateHooks = append(leaderBoardAfterUpdateHooks, leaderBoardHook)
		leaderBoardAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		leaderBoardBeforeDeleteMu.Lock()
		leaderBoardBeforeDeleteHooks = append(leaderBoardBeforeDeleteHooks, leaderBoardHook)
		leaderBoardBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		leaderBoardAfterDeleteMu.Lock()
		leaderBoardAfterDeleteHooks = append(leaderBoardAfterDeleteHooks, leaderBoardHook)
		leaderBoardAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		leaderBoardBeforeUpsertMu.Lock()
		leaderBoardBeforeUpsertHooks = append(leaderBoardBeforeUpsertHooks, leaderBoardHook)
		leaderBoardBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		leaderBoardAfterUpsertMu.Lock()
		leaderBoardAfterUpsertHooks = append(leaderBoardAfterUpsertHooks, leaderBoardHook)
		leaderBoardAfterUpsertMu.Unlock()
	}
}

// One returns a single leaderBoard record from the query.
func (q leaderBoardQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LeaderBoard, error) {
	o := &LeaderBoard{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dao: failed to execute a one query for leader_board")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all LeaderBoard records from the query.
func (q leaderBoardQuery) All(ctx context.Context, exec boil.ContextExecutor) (LeaderBoardSlice, error) {
	var o []*LeaderBoard

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dao: failed to assign all query results to LeaderBoard slice")
	}

	if len(leaderBoardAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all LeaderBoard records in the query.
func (q leaderBoardQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to count leader_board rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q leaderBoardQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dao: failed to check if leader_board exists")
	}

	return count > 0, nil
}

// LeaderBoardScores retrieves all the leader_board_score's LeaderBoardScores with an executor.
func (o *LeaderBoard) LeaderBoardScores(mods ...qm.QueryMod) leaderBoardScoreQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"leader_board_scores\".\"leader_board_id\"=?", o.ID),
	)

	return LeaderBoardScores(queryMods...)
}

// LoadLeaderBoardScores allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (leaderBoardL) LoadLeaderBoardScores(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLeaderBoard interface{}, mods queries.Applicator) error {
	var slice []*LeaderBoard
	var object *LeaderBoard

	if singular {
		var ok bool
		object, ok = maybeLeaderBoard.(*LeaderBoard)
		if !ok {
			object = new(LeaderBoard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLeaderBoard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLeaderBoard))
			}
		}
	} else {
		s, ok := maybeLeaderBoard.(*[]*LeaderBoard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLeaderBoard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLeaderBoard))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &leaderBoardR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &leaderBoardR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`leader_board_scores`),
		qm.WhereIn(`leader_board_scores.leader_board_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load leader_board_scores")
	}

	var resultSlice []*LeaderBoardScore
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice leader_board_scores")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on leader_board_scores")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for leader_board_scores")
	}

	if len(leaderBoardScoreAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LeaderBoardScores = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &leaderBoardScoreR{}
			}
			foreign.R.LeaderBoard = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.LeaderBoardID {
				local.R.LeaderBoardScores = append(local.R.LeaderBoardScores, foreign)
				if foreign.R == nil {
					foreign.R = &leaderBoardScoreR{}
				}
				foreign.R.LeaderBoard = local
				break
			}
		}
	}

	return nil
}

// AddLeaderBoardScores adds the given related objects to the existing relationships
// of the leader_board, optionally inserting them as new records.
// Appends related to o.R.LeaderBoardScores.
// Sets related.R.LeaderBoard appropriately.
func (o *LeaderBoard) AddLeaderBoardScores(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*LeaderBoardScore) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.LeaderBoardID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"leader_board_scores\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"leader_board_id"}),
				strmangle.WhereClause("\"", "\"", 2, leaderBoardScorePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.LeaderBoardID, rel.ScoreID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.LeaderBoardID = o.ID
		}
	}

	if o.R == nil {
		o.R = &leaderBoardR{
			LeaderBoardScores: related,
		}
	} else {
		o.R.LeaderBoardScores = append(o.R.LeaderBoardScores, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &leaderBoardScoreR{
				LeaderBoard: o,
			}
		} else {
			rel.R.LeaderBoard = o
		}
	}
	return nil
}

// LeaderBoards retrieves all the records using an executor.
func LeaderBoards(mods ...qm.QueryMod) leaderBoardQuery {
	mods = append(mods, qm.From("\"leader_board\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"leader_board\".*"})
	}

	return leaderBoardQuery{q}
}

// FindLeaderBoard retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLeaderBoard(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*LeaderBoard, error) {
	leaderBoardObj := &LeaderBoard{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"leader_board\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, leaderBoardObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dao: unable to select from leader_board")
	}

	if err = leaderBoardObj.doAfterSelectHooks(ctx, exec); err != nil {
		return leaderBoardObj, err
	}

	return leaderBoardObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LeaderBoard) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dao: no leader_board provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(leaderBoardColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	leaderBoardInsertCacheMut.RLock()
	cache, cached := leaderBoardInsertCache[key]
	leaderBoardInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			leaderBoardAllColumns,
			leaderBoardColumnsWithDefault,
			leaderBoardColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(leaderBoardType, leaderBoardMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(leaderBoardType, leaderBoardMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"leader_board\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"leader_board\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dao: unable to insert into leader_board")
	}

	if !cached {
		leaderBoardInsertCacheMut.Lock()
		leaderBoardInsertCache[key] = cache
		leaderBoardInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the LeaderBoard.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LeaderBoard) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	leaderBoardUpdateCacheMut.RLock()
	cache, cached := leaderBoardUpdateCache[key]
	leaderBoardUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			leaderBoardAllColumns,
			leaderBoardPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dao: unable to update leader_board, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"leader_board\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, leaderBoardPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(leaderBoardType, leaderBoardMapping, append(wl, leaderBoardPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update leader_board row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by update for leader_board")
	}

	if !cached {
		leaderBoardUpdateCacheMut.Lock()
		leaderBoardUpdateCache[key] = cache
		leaderBoardUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q leaderBoardQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update all for leader_board")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to retrieve rows affected for leader_board")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LeaderBoardSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dao: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), leaderBoardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"leader_board\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, leaderBoardPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update all in leaderBoard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to retrieve rows affected all in update all leaderBoard")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LeaderBoard) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dao: no leader_board provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(leaderBoardColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	leaderBoardUpsertCacheMut.RLock()
	cache, cached := leaderBoardUpsertCache[key]
	leaderBoardUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			leaderBoardAllColumns,
			leaderBoardColumnsWithDefault,
			leaderBoardColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			leaderBoardAllColumns,
			leaderBoardPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dao: unable to upsert leader_board, could not build update column list")
		}

		ret := strmangle.SetComplement(leaderBoardAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(leaderBoardPrimaryKeyColumns) == 0 {
				return errors.New("dao: unable to upsert leader_board, could not build conflict column list")
			}

			conflict = make([]string, len(leaderBoardPrimaryKeyColumns))
			copy(conflict, leaderBoardPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"leader_board\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(leaderBoardType, leaderBoardMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(leaderBoardType, leaderBoardMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dao: unable to upsert leader_board")
	}

	if !cached {
		leaderBoardUpsertCacheMut.Lock()
		leaderBoardUpsertCache[key] = cache
		leaderBoardUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single LeaderBoard record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LeaderBoard) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dao: no LeaderBoard provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), leaderBoardPrimaryKeyMapping)
	sql := "DELETE FROM \"leader_board\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete from leader_board")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by delete for leader_board")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q leaderBoardQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dao: no leaderBoardQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete all from leader_board")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by deleteall for leader_board")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LeaderBoardSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(leaderBoardBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), leaderBoardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"leader_board\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, leaderBoardPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete all from leaderBoard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by deleteall for leader_board")
	}

	if len(leaderBoardAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LeaderBoard) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLeaderBoard(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LeaderBoardSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LeaderBoardSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), leaderBoardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"leader_board\".* FROM \"leader_board\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, leaderBoardPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dao: unable to reload all in LeaderBoardSlice")
	}

	*o = slice

	return nil
}

// LeaderBoardExists checks if the LeaderBoard row exists.
func LeaderBoardExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"leader_board\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dao: unable to check if leader_board exists")
	}

	return exists, nil
}

// Exists checks if the LeaderBoard row exists.
func (o *LeaderBoard) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return LeaderBoardExists(ctx, exec, o.ID)
}

// /////////////////////////////// BEGIN EXTENSIONS /////////////////////////////////
// Expose table columns
var (
	LeaderBoardAllColumns            = leaderBoardAllColumns
	LeaderBoardColumnsWithoutDefault = leaderBoardColumnsWithoutDefault
	LeaderBoardColumnsWithDefault    = leaderBoardColumnsWithDefault
	LeaderBoardPrimaryKeyColumns     = leaderBoardPrimaryKeyColumns
	LeaderBoardGeneratedColumns      = leaderBoardGeneratedColumns
)

// InsertAll inserts all rows with the specified column values, using an executor.
func (o LeaderBoardSlice) InsertAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var sql string
	vals := []interface{}{}
	for i, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}
			if row.UpdatedAt.IsZero() {
				row.UpdatedAt = currTime
			}
		}

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		wl, _ := columns.InsertColumnSet(
			leaderBoardAllColumns,
			leaderBoardColumnsWithDefault,
			leaderBoardColumnsWithoutDefault,
			queries.NonZeroDefaultSet(leaderBoardColumnsWithDefault, row),
		)
		if i == 0 {
			sql = "INSERT INTO \"leader_board\" " + "(\"" + strings.Join(wl, "\",\"") + "\")" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(leaderBoardType, leaderBoardMapping, wl)
		if err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to insert all from leaderBoard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by insertall for leader_board")
	}

	if len(leaderBoardAfterInsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterInsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// UpsertAll inserts or updates all rows
// Currently it doesn't support "NoContext" and "NoRowsAffected"
func (o LeaderBoardSlice) UpsertAll(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	nzDefaults := queries.NonZeroDefaultSet(leaderBoardColumnsWithDefault, o[0])

	insert, _ := insertColumns.InsertColumnSet(
		leaderBoardAllColumns,
		leaderBoardColumnsWithDefault,
		leaderBoardColumnsWithoutDefault,
		nzDefaults,
	)
	update := updateColumns.UpdateColumnSet(
		leaderBoardAllColumns,
		leaderBoardPrimaryKeyColumns,
	)

	if updateOnConflict && len(update) == 0 {
		return 0, errors.New("dao: unable to upsert leader_board, could not build update column list")
	}

	conflict := conflictColumns
	if len(conflict) == 0 {
		conflict = make([]string, len(leaderBoardPrimaryKeyColumns))
		copy(conflict, leaderBoardPrimaryKeyColumns)
	}

	buf := strmangle.GetBuffer()
	defer strmangle.PutBuffer(buf)

	columns := "DEFAULT VALUES"
	if len(insert) != 0 {
		columns = fmt.Sprintf("(%s) VALUES %s",
			strings.Join(insert, ", "),
			strmangle.Placeholders(dialect.UseIndexPlaceholders, len(insert)*len(o), 1, len(insert)),
		)
	}

	fmt.Fprintf(
		buf,
		"INSERT INTO %s %s ON CONFLICT ",
		"\"leader_board\"",
		columns,
	)

	if !updateOnConflict || len(update) == 0 {
		buf.WriteString("DO NOTHING")
	} else {
		buf.WriteByte('(')
		buf.WriteString(strings.Join(conflict, ", "))
		buf.WriteString(") DO UPDATE SET ")

		for i, v := range update {
			if i != 0 {
				buf.WriteByte(',')
			}
			quoted := strmangle.IdentQuote(dialect.LQ, dialect.RQ, v)
			buf.WriteString(quoted)
			buf.WriteString(" = EXCLUDED.")
			buf.WriteString(quoted)
		}
	}

	query := buf.String()
	valueMapping, err := queries.BindMapping(leaderBoardType, leaderBoardMapping, insert)
	if err != nil {
		return 0, err
	}

	var vals []interface{}
	for _, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}

			row.UpdatedAt = currTime
		}

		if err := row.doBeforeUpsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valueMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, query, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to upsert for leader_board")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by upsert for leader_board")
	}

	if len(leaderBoardAfterUpsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterUpsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

///////////////////////////////// END EXTENSIONS /////////////////////////////////
