// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dao

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserAuthentication is an object representing the database table.
type UserAuthentication struct {
	UserID              string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	BaasUserID          string    `boil:"baas_user_id" json:"baas_user_id" toml:"baas_user_id" yaml:"baas_user_id"`
	LastAuthenticatedAt time.Time `boil:"last_authenticated_at" json:"last_authenticated_at" toml:"last_authenticated_at" yaml:"last_authenticated_at"`
	CreatedAt           time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt           time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *userAuthenticationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userAuthenticationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserAuthenticationColumns = struct {
	UserID              string
	BaasUserID          string
	LastAuthenticatedAt string
	CreatedAt           string
	UpdatedAt           string
}{
	UserID:              "user_id",
	BaasUserID:          "baas_user_id",
	LastAuthenticatedAt: "last_authenticated_at",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
}

var UserAuthenticationTableColumns = struct {
	UserID              string
	BaasUserID          string
	LastAuthenticatedAt string
	CreatedAt           string
	UpdatedAt           string
}{
	UserID:              "user_authentications.user_id",
	BaasUserID:          "user_authentications.baas_user_id",
	LastAuthenticatedAt: "user_authentications.last_authenticated_at",
	CreatedAt:           "user_authentications.created_at",
	UpdatedAt:           "user_authentications.updated_at",
}

// Generated where

var UserAuthenticationWhere = struct {
	UserID              whereHelperstring
	BaasUserID          whereHelperstring
	LastAuthenticatedAt whereHelpertime_Time
	CreatedAt           whereHelpertime_Time
	UpdatedAt           whereHelpertime_Time
}{
	UserID:              whereHelperstring{field: "\"user_authentications\".\"user_id\""},
	BaasUserID:          whereHelperstring{field: "\"user_authentications\".\"baas_user_id\""},
	LastAuthenticatedAt: whereHelpertime_Time{field: "\"user_authentications\".\"last_authenticated_at\""},
	CreatedAt:           whereHelpertime_Time{field: "\"user_authentications\".\"created_at\""},
	UpdatedAt:           whereHelpertime_Time{field: "\"user_authentications\".\"updated_at\""},
}

// UserAuthenticationRels is where relationship names are stored.
var UserAuthenticationRels = struct {
	User string
}{
	User: "User",
}

// userAuthenticationR is where relationships are stored.
type userAuthenticationR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userAuthenticationR) NewStruct() *userAuthenticationR {
	return &userAuthenticationR{}
}

func (r *userAuthenticationR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// userAuthenticationL is where Load methods for each relationship are stored.
type userAuthenticationL struct{}

var (
	userAuthenticationAllColumns            = []string{"user_id", "baas_user_id", "last_authenticated_at", "created_at", "updated_at"}
	userAuthenticationColumnsWithoutDefault = []string{"user_id", "baas_user_id", "last_authenticated_at", "created_at", "updated_at"}
	userAuthenticationColumnsWithDefault    = []string{}
	userAuthenticationPrimaryKeyColumns     = []string{"user_id"}
	userAuthenticationGeneratedColumns      = []string{}
)

type (
	// UserAuthenticationSlice is an alias for a slice of pointers to UserAuthentication.
	// This should almost always be used instead of []UserAuthentication.
	UserAuthenticationSlice []*UserAuthentication
	// UserAuthenticationHook is the signature for custom UserAuthentication hook methods
	UserAuthenticationHook func(context.Context, boil.ContextExecutor, *UserAuthentication) error

	userAuthenticationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userAuthenticationType                 = reflect.TypeOf(&UserAuthentication{})
	userAuthenticationMapping              = queries.MakeStructMapping(userAuthenticationType)
	userAuthenticationPrimaryKeyMapping, _ = queries.BindMapping(userAuthenticationType, userAuthenticationMapping, userAuthenticationPrimaryKeyColumns)
	userAuthenticationInsertCacheMut       sync.RWMutex
	userAuthenticationInsertCache          = make(map[string]insertCache)
	userAuthenticationUpdateCacheMut       sync.RWMutex
	userAuthenticationUpdateCache          = make(map[string]updateCache)
	userAuthenticationUpsertCacheMut       sync.RWMutex
	userAuthenticationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userAuthenticationAfterSelectMu sync.Mutex
var userAuthenticationAfterSelectHooks []UserAuthenticationHook

var userAuthenticationBeforeInsertMu sync.Mutex
var userAuthenticationBeforeInsertHooks []UserAuthenticationHook
var userAuthenticationAfterInsertMu sync.Mutex
var userAuthenticationAfterInsertHooks []UserAuthenticationHook

var userAuthenticationBeforeUpdateMu sync.Mutex
var userAuthenticationBeforeUpdateHooks []UserAuthenticationHook
var userAuthenticationAfterUpdateMu sync.Mutex
var userAuthenticationAfterUpdateHooks []UserAuthenticationHook

var userAuthenticationBeforeDeleteMu sync.Mutex
var userAuthenticationBeforeDeleteHooks []UserAuthenticationHook
var userAuthenticationAfterDeleteMu sync.Mutex
var userAuthenticationAfterDeleteHooks []UserAuthenticationHook

var userAuthenticationBeforeUpsertMu sync.Mutex
var userAuthenticationBeforeUpsertHooks []UserAuthenticationHook
var userAuthenticationAfterUpsertMu sync.Mutex
var userAuthenticationAfterUpsertHooks []UserAuthenticationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserAuthentication) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAuthenticationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserAuthentication) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAuthenticationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserAuthentication) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAuthenticationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserAuthentication) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAuthenticationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserAuthentication) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAuthenticationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserAuthentication) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAuthenticationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserAuthentication) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAuthenticationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserAuthentication) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAuthenticationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserAuthentication) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAuthenticationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserAuthenticationHook registers your hook function for all future operations.
func AddUserAuthenticationHook(hookPoint boil.HookPoint, userAuthenticationHook UserAuthenticationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userAuthenticationAfterSelectMu.Lock()
		userAuthenticationAfterSelectHooks = append(userAuthenticationAfterSelectHooks, userAuthenticationHook)
		userAuthenticationAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userAuthenticationBeforeInsertMu.Lock()
		userAuthenticationBeforeInsertHooks = append(userAuthenticationBeforeInsertHooks, userAuthenticationHook)
		userAuthenticationBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userAuthenticationAfterInsertMu.Lock()
		userAuthenticationAfterInsertHooks = append(userAuthenticationAfterInsertHooks, userAuthenticationHook)
		userAuthenticationAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userAuthenticationBeforeUpdateMu.Lock()
		userAuthenticationBeforeUpdateHooks = append(userAuthenticationBeforeUpdateHooks, userAuthenticationHook)
		userAuthenticationBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userAuthenticationAfterUpdateMu.Lock()
		userAuthenticationAfterUpdateHooks = append(userAuthenticationAfterUpdateHooks, userAuthenticationHook)
		userAuthenticationAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userAuthenticationBeforeDeleteMu.Lock()
		userAuthenticationBeforeDeleteHooks = append(userAuthenticationBeforeDeleteHooks, userAuthenticationHook)
		userAuthenticationBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userAuthenticationAfterDeleteMu.Lock()
		userAuthenticationAfterDeleteHooks = append(userAuthenticationAfterDeleteHooks, userAuthenticationHook)
		userAuthenticationAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userAuthenticationBeforeUpsertMu.Lock()
		userAuthenticationBeforeUpsertHooks = append(userAuthenticationBeforeUpsertHooks, userAuthenticationHook)
		userAuthenticationBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userAuthenticationAfterUpsertMu.Lock()
		userAuthenticationAfterUpsertHooks = append(userAuthenticationAfterUpsertHooks, userAuthenticationHook)
		userAuthenticationAfterUpsertMu.Unlock()
	}
}

// One returns a single userAuthentication record from the query.
func (q userAuthenticationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserAuthentication, error) {
	o := &UserAuthentication{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dao: failed to execute a one query for user_authentications")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserAuthentication records from the query.
func (q userAuthenticationQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserAuthenticationSlice, error) {
	var o []*UserAuthentication

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dao: failed to assign all query results to UserAuthentication slice")
	}

	if len(userAuthenticationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserAuthentication records in the query.
func (q userAuthenticationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to count user_authentications rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userAuthenticationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dao: failed to check if user_authentications exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *UserAuthentication) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userAuthenticationL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserAuthentication interface{}, mods queries.Applicator) error {
	var slice []*UserAuthentication
	var object *UserAuthentication

	if singular {
		var ok bool
		object, ok = maybeUserAuthentication.(*UserAuthentication)
		if !ok {
			object = new(UserAuthentication)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserAuthentication)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserAuthentication))
			}
		}
	} else {
		s, ok := maybeUserAuthentication.(*[]*UserAuthentication)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserAuthentication)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserAuthentication))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userAuthenticationR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userAuthenticationR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserAuthentication = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserAuthentication = local
				break
			}
		}
	}

	return nil
}

// SetUser of the userAuthentication to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserAuthentication.
func (o *UserAuthentication) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_authentications\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userAuthenticationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userAuthenticationR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserAuthentication: o,
		}
	} else {
		related.R.UserAuthentication = o
	}

	return nil
}

// UserAuthentications retrieves all the records using an executor.
func UserAuthentications(mods ...qm.QueryMod) userAuthenticationQuery {
	mods = append(mods, qm.From("\"user_authentications\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_authentications\".*"})
	}

	return userAuthenticationQuery{q}
}

// FindUserAuthentication retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserAuthentication(ctx context.Context, exec boil.ContextExecutor, userID string, selectCols ...string) (*UserAuthentication, error) {
	userAuthenticationObj := &UserAuthentication{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_authentications\" where \"user_id\"=$1", sel,
	)

	q := queries.Raw(query, userID)

	err := q.Bind(ctx, exec, userAuthenticationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dao: unable to select from user_authentications")
	}

	if err = userAuthenticationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userAuthenticationObj, err
	}

	return userAuthenticationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserAuthentication) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dao: no user_authentications provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userAuthenticationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userAuthenticationInsertCacheMut.RLock()
	cache, cached := userAuthenticationInsertCache[key]
	userAuthenticationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userAuthenticationAllColumns,
			userAuthenticationColumnsWithDefault,
			userAuthenticationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userAuthenticationType, userAuthenticationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userAuthenticationType, userAuthenticationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_authentications\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_authentications\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dao: unable to insert into user_authentications")
	}

	if !cached {
		userAuthenticationInsertCacheMut.Lock()
		userAuthenticationInsertCache[key] = cache
		userAuthenticationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserAuthentication.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserAuthentication) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userAuthenticationUpdateCacheMut.RLock()
	cache, cached := userAuthenticationUpdateCache[key]
	userAuthenticationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userAuthenticationAllColumns,
			userAuthenticationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dao: unable to update user_authentications, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_authentications\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userAuthenticationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userAuthenticationType, userAuthenticationMapping, append(wl, userAuthenticationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update user_authentications row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by update for user_authentications")
	}

	if !cached {
		userAuthenticationUpdateCacheMut.Lock()
		userAuthenticationUpdateCache[key] = cache
		userAuthenticationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userAuthenticationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update all for user_authentications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to retrieve rows affected for user_authentications")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserAuthenticationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dao: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAuthenticationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_authentications\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userAuthenticationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update all in userAuthentication slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to retrieve rows affected all in update all userAuthentication")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserAuthentication) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dao: no user_authentications provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userAuthenticationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userAuthenticationUpsertCacheMut.RLock()
	cache, cached := userAuthenticationUpsertCache[key]
	userAuthenticationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userAuthenticationAllColumns,
			userAuthenticationColumnsWithDefault,
			userAuthenticationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userAuthenticationAllColumns,
			userAuthenticationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dao: unable to upsert user_authentications, could not build update column list")
		}

		ret := strmangle.SetComplement(userAuthenticationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userAuthenticationPrimaryKeyColumns) == 0 {
				return errors.New("dao: unable to upsert user_authentications, could not build conflict column list")
			}

			conflict = make([]string, len(userAuthenticationPrimaryKeyColumns))
			copy(conflict, userAuthenticationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_authentications\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userAuthenticationType, userAuthenticationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userAuthenticationType, userAuthenticationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dao: unable to upsert user_authentications")
	}

	if !cached {
		userAuthenticationUpsertCacheMut.Lock()
		userAuthenticationUpsertCache[key] = cache
		userAuthenticationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserAuthentication record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserAuthentication) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dao: no UserAuthentication provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userAuthenticationPrimaryKeyMapping)
	sql := "DELETE FROM \"user_authentications\" WHERE \"user_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete from user_authentications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by delete for user_authentications")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userAuthenticationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dao: no userAuthenticationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete all from user_authentications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by deleteall for user_authentications")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserAuthenticationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userAuthenticationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAuthenticationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_authentications\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userAuthenticationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete all from userAuthentication slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by deleteall for user_authentications")
	}

	if len(userAuthenticationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserAuthentication) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserAuthentication(ctx, exec, o.UserID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserAuthenticationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserAuthenticationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAuthenticationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_authentications\".* FROM \"user_authentications\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userAuthenticationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dao: unable to reload all in UserAuthenticationSlice")
	}

	*o = slice

	return nil
}

// UserAuthenticationExists checks if the UserAuthentication row exists.
func UserAuthenticationExists(ctx context.Context, exec boil.ContextExecutor, userID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_authentications\" where \"user_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID)
	}
	row := exec.QueryRowContext(ctx, sql, userID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dao: unable to check if user_authentications exists")
	}

	return exists, nil
}

// Exists checks if the UserAuthentication row exists.
func (o *UserAuthentication) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserAuthenticationExists(ctx, exec, o.UserID)
}

// /////////////////////////////// BEGIN EXTENSIONS /////////////////////////////////
// Expose table columns
var (
	UserAuthenticationAllColumns            = userAuthenticationAllColumns
	UserAuthenticationColumnsWithoutDefault = userAuthenticationColumnsWithoutDefault
	UserAuthenticationColumnsWithDefault    = userAuthenticationColumnsWithDefault
	UserAuthenticationPrimaryKeyColumns     = userAuthenticationPrimaryKeyColumns
	UserAuthenticationGeneratedColumns      = userAuthenticationGeneratedColumns
)

// InsertAll inserts all rows with the specified column values, using an executor.
func (o UserAuthenticationSlice) InsertAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var sql string
	vals := []interface{}{}
	for i, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}
			if row.UpdatedAt.IsZero() {
				row.UpdatedAt = currTime
			}
		}

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		wl, _ := columns.InsertColumnSet(
			userAuthenticationAllColumns,
			userAuthenticationColumnsWithDefault,
			userAuthenticationColumnsWithoutDefault,
			queries.NonZeroDefaultSet(userAuthenticationColumnsWithDefault, row),
		)
		if i == 0 {
			sql = "INSERT INTO \"user_authentications\" " + "(\"" + strings.Join(wl, "\",\"") + "\")" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(userAuthenticationType, userAuthenticationMapping, wl)
		if err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to insert all from userAuthentication slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by insertall for user_authentications")
	}

	if len(userAuthenticationAfterInsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterInsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// UpsertAll inserts or updates all rows
// Currently it doesn't support "NoContext" and "NoRowsAffected"
func (o UserAuthenticationSlice) UpsertAll(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	nzDefaults := queries.NonZeroDefaultSet(userAuthenticationColumnsWithDefault, o[0])

	insert, _ := insertColumns.InsertColumnSet(
		userAuthenticationAllColumns,
		userAuthenticationColumnsWithDefault,
		userAuthenticationColumnsWithoutDefault,
		nzDefaults,
	)
	update := updateColumns.UpdateColumnSet(
		userAuthenticationAllColumns,
		userAuthenticationPrimaryKeyColumns,
	)

	if updateOnConflict && len(update) == 0 {
		return 0, errors.New("dao: unable to upsert user_authentications, could not build update column list")
	}

	conflict := conflictColumns
	if len(conflict) == 0 {
		conflict = make([]string, len(userAuthenticationPrimaryKeyColumns))
		copy(conflict, userAuthenticationPrimaryKeyColumns)
	}

	buf := strmangle.GetBuffer()
	defer strmangle.PutBuffer(buf)

	columns := "DEFAULT VALUES"
	if len(insert) != 0 {
		columns = fmt.Sprintf("(%s) VALUES %s",
			strings.Join(insert, ", "),
			strmangle.Placeholders(dialect.UseIndexPlaceholders, len(insert)*len(o), 1, len(insert)),
		)
	}

	fmt.Fprintf(
		buf,
		"INSERT INTO %s %s ON CONFLICT ",
		"\"user_authentications\"",
		columns,
	)

	if !updateOnConflict || len(update) == 0 {
		buf.WriteString("DO NOTHING")
	} else {
		buf.WriteByte('(')
		buf.WriteString(strings.Join(conflict, ", "))
		buf.WriteString(") DO UPDATE SET ")

		for i, v := range update {
			if i != 0 {
				buf.WriteByte(',')
			}
			quoted := strmangle.IdentQuote(dialect.LQ, dialect.RQ, v)
			buf.WriteString(quoted)
			buf.WriteString(" = EXCLUDED.")
			buf.WriteString(quoted)
		}
	}

	query := buf.String()
	valueMapping, err := queries.BindMapping(userAuthenticationType, userAuthenticationMapping, insert)
	if err != nil {
		return 0, err
	}

	var vals []interface{}
	for _, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}

			row.UpdatedAt = currTime
		}

		if err := row.doBeforeUpsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valueMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, query, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to upsert for user_authentications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by upsert for user_authentications")
	}

	if len(userAuthenticationAfterUpsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterUpsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

///////////////////////////////// END EXTENSIONS /////////////////////////////////
