// Code generated by github.com/averak/hbaas/cmd/protoc-gen-hbaas-server. DO NOT EDIT.
// source: api/private_kvs.proto

package api

import (
	connect "connectrpc.com/connect"
	context "context"
	connect1 "github.com/averak/hbaas/app/infrastructure/connect"
	advice "github.com/averak/hbaas/app/infrastructure/connect/advice"
	custom_option "github.com/averak/hbaas/protobuf/custom_option"
	proto "google.golang.org/protobuf/proto"
)

// プライベート KVS 機能とは、任意のデータを格納できる汎用的な Key-Value ストアです。
// このデータは同じユーザの端末間で共有され、他ユーザには公開されません。
type hbaas_PrivateKVSServiceHandler interface {
	GetETagV1(ctx context.Context, req *advice.Request[*PrivateKVSServiceGetETagV1Request]) (*PrivateKVSServiceGetETagV1Response, error)

	// KVS のエントリを検索します。
	// ただし、検索条件が空の場合は空リストを返します。
	GetV1(ctx context.Context, req *advice.Request[*PrivateKVSServiceGetV1Request]) (*PrivateKVSServiceGetV1Response, error)

	// KVS にエントリを登録します。
	// エントリの作成、更新、削除を行うことが可能で、value が空のエントリは削除されます。
	SetV1(ctx context.Context, req *advice.Request[*PrivateKVSServiceSetV1Request]) (*PrivateKVSServiceSetV1Response, error)
	SetV1Errors(errs *PrivateKVSServiceSetV1Errors)
}

type PrivateKVSServiceSetV1Errors struct {
	// The value bytes must be less than or equal to 1KiB.
	ILLEGAL_ARGUMENT *advice.MethodErrDefinition
	// The ETag is not up-to-date.
	RESOURCE_CONFLICT *advice.MethodErrDefinition

	causes map[error]*advice.MethodErrDefinition
}

func (e *PrivateKVSServiceSetV1Errors) Map(from error, to *advice.MethodErrDefinition) {
	e.causes[from] = to
}

func NewPrivateKVSServiceHandler(handler hbaas_PrivateKVSServiceHandler, adv advice.Advice) hbaas_PrivateKVSServiceHandlerImpl {
	service := File_api_private_kvs_proto.Services().ByName("PrivateKVSService")
	causes := [3]map[error]*advice.MethodErrDefinition{{}, {}, {}}
	methodOpts := [3]*advice.MethodOption{}
	for i, m := 0, service.Methods(); i < 3; i++ {
		methodOpts[i] = proto.GetExtension(m.Get(i).Options(), custom_option.E_MethodOption).(*advice.MethodOption)
	}
	handler.SetV1Errors(&PrivateKVSServiceSetV1Errors{
		ILLEGAL_ARGUMENT:  methodOpts[2].GetMethodErrorDefinitions()[0],
		RESOURCE_CONFLICT: methodOpts[2].GetMethodErrorDefinitions()[1],
		causes:            causes[2],
	})
	methodInfo := [3]*advice.MethodInfo{
		advice.NewMethodInfo(methodOpts[0], causes[0]),
		advice.NewMethodInfo(methodOpts[1], causes[1]),
		advice.NewMethodInfo(methodOpts[2], causes[2]),
	}
	return hbaas_PrivateKVSServiceHandlerImpl{handler: handler, advice: adv, methodInfo: methodInfo}
}

type hbaas_PrivateKVSServiceHandlerImpl struct {
	handler    hbaas_PrivateKVSServiceHandler
	advice     advice.Advice
	methodInfo [3]*advice.MethodInfo
}

func (h hbaas_PrivateKVSServiceHandlerImpl) GetETagV1(ctx context.Context, req *connect.Request[PrivateKVSServiceGetETagV1Request]) (*connect.Response[PrivateKVSServiceGetETagV1Response], error) {
	res, err := connect1.Execute(ctx, req.Msg, req.Header(), h.methodInfo[0], h.handler.GetETagV1, h.advice)
	if err != nil {
		return nil, err
	}
	return connect.NewResponse(res), nil
}

func (h hbaas_PrivateKVSServiceHandlerImpl) GetV1(ctx context.Context, req *connect.Request[PrivateKVSServiceGetV1Request]) (*connect.Response[PrivateKVSServiceGetV1Response], error) {
	res, err := connect1.Execute(ctx, req.Msg, req.Header(), h.methodInfo[1], h.handler.GetV1, h.advice)
	if err != nil {
		return nil, err
	}
	return connect.NewResponse(res), nil
}

func (h hbaas_PrivateKVSServiceHandlerImpl) SetV1(ctx context.Context, req *connect.Request[PrivateKVSServiceSetV1Request]) (*connect.Response[PrivateKVSServiceSetV1Response], error) {
	res, err := connect1.Execute(ctx, req.Msg, req.Header(), h.methodInfo[2], h.handler.SetV1, h.advice)
	if err != nil {
		return nil, err
	}
	return connect.NewResponse(res), nil
}
