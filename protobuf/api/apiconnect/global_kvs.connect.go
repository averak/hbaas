// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/global_kvs.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/averak/hbaas/protobuf/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GlobalKVSServiceName is the fully-qualified name of the GlobalKVSService service.
	GlobalKVSServiceName = "api.GlobalKVSService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GlobalKVSServiceGetV1Procedure is the fully-qualified name of the GlobalKVSService's GetV1 RPC.
	GlobalKVSServiceGetV1Procedure = "/api.GlobalKVSService/GetV1"
	// GlobalKVSServiceSetV1Procedure is the fully-qualified name of the GlobalKVSService's SetV1 RPC.
	GlobalKVSServiceSetV1Procedure = "/api.GlobalKVSService/SetV1"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	globalKVSServiceServiceDescriptor     = api.File_api_global_kvs_proto.Services().ByName("GlobalKVSService")
	globalKVSServiceGetV1MethodDescriptor = globalKVSServiceServiceDescriptor.Methods().ByName("GetV1")
	globalKVSServiceSetV1MethodDescriptor = globalKVSServiceServiceDescriptor.Methods().ByName("SetV1")
)

// GlobalKVSServiceClient is a client for the api.GlobalKVSService service.
type GlobalKVSServiceClient interface {
	// KVS のエントリを検索します。
	// ただし、検索条件が空の場合は空リストを返します。
	GetV1(context.Context, *connect.Request[api.GlobalKVSServiceGetV1Request]) (*connect.Response[api.GlobalKVSServiceGetV1Response], error)
	// KVS にエントリを登録します。
	// エントリの作成、更新、削除を行うことが可能で、value が空のエントリは削除されます。
	SetV1(context.Context, *connect.Request[api.GlobalKVSServiceSetV1Request]) (*connect.Response[api.GlobalKVSServiceSetV1Response], error)
}

// NewGlobalKVSServiceClient constructs a client for the api.GlobalKVSService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGlobalKVSServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GlobalKVSServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &globalKVSServiceClient{
		getV1: connect.NewClient[api.GlobalKVSServiceGetV1Request, api.GlobalKVSServiceGetV1Response](
			httpClient,
			baseURL+GlobalKVSServiceGetV1Procedure,
			connect.WithSchema(globalKVSServiceGetV1MethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setV1: connect.NewClient[api.GlobalKVSServiceSetV1Request, api.GlobalKVSServiceSetV1Response](
			httpClient,
			baseURL+GlobalKVSServiceSetV1Procedure,
			connect.WithSchema(globalKVSServiceSetV1MethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// globalKVSServiceClient implements GlobalKVSServiceClient.
type globalKVSServiceClient struct {
	getV1 *connect.Client[api.GlobalKVSServiceGetV1Request, api.GlobalKVSServiceGetV1Response]
	setV1 *connect.Client[api.GlobalKVSServiceSetV1Request, api.GlobalKVSServiceSetV1Response]
}

// GetV1 calls api.GlobalKVSService.GetV1.
func (c *globalKVSServiceClient) GetV1(ctx context.Context, req *connect.Request[api.GlobalKVSServiceGetV1Request]) (*connect.Response[api.GlobalKVSServiceGetV1Response], error) {
	return c.getV1.CallUnary(ctx, req)
}

// SetV1 calls api.GlobalKVSService.SetV1.
func (c *globalKVSServiceClient) SetV1(ctx context.Context, req *connect.Request[api.GlobalKVSServiceSetV1Request]) (*connect.Response[api.GlobalKVSServiceSetV1Response], error) {
	return c.setV1.CallUnary(ctx, req)
}

// GlobalKVSServiceHandler is an implementation of the api.GlobalKVSService service.
type GlobalKVSServiceHandler interface {
	// KVS のエントリを検索します。
	// ただし、検索条件が空の場合は空リストを返します。
	GetV1(context.Context, *connect.Request[api.GlobalKVSServiceGetV1Request]) (*connect.Response[api.GlobalKVSServiceGetV1Response], error)
	// KVS にエントリを登録します。
	// エントリの作成、更新、削除を行うことが可能で、value が空のエントリは削除されます。
	SetV1(context.Context, *connect.Request[api.GlobalKVSServiceSetV1Request]) (*connect.Response[api.GlobalKVSServiceSetV1Response], error)
}

// NewGlobalKVSServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGlobalKVSServiceHandler(svc GlobalKVSServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	globalKVSServiceGetV1Handler := connect.NewUnaryHandler(
		GlobalKVSServiceGetV1Procedure,
		svc.GetV1,
		connect.WithSchema(globalKVSServiceGetV1MethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	globalKVSServiceSetV1Handler := connect.NewUnaryHandler(
		GlobalKVSServiceSetV1Procedure,
		svc.SetV1,
		connect.WithSchema(globalKVSServiceSetV1MethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.GlobalKVSService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GlobalKVSServiceGetV1Procedure:
			globalKVSServiceGetV1Handler.ServeHTTP(w, r)
		case GlobalKVSServiceSetV1Procedure:
			globalKVSServiceSetV1Handler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGlobalKVSServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGlobalKVSServiceHandler struct{}

func (UnimplementedGlobalKVSServiceHandler) GetV1(context.Context, *connect.Request[api.GlobalKVSServiceGetV1Request]) (*connect.Response[api.GlobalKVSServiceGetV1Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.GlobalKVSService.GetV1 is not implemented"))
}

func (UnimplementedGlobalKVSServiceHandler) SetV1(context.Context, *connect.Request[api.GlobalKVSServiceSetV1Request]) (*connect.Response[api.GlobalKVSServiceSetV1Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.GlobalKVSService.SetV1 is not implemented"))
}
