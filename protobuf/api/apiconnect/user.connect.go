// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/user.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/averak/hbaas/protobuf/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "api.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceActivateV1Procedure is the fully-qualified name of the UserService's ActivateV1 RPC.
	UserServiceActivateV1Procedure = "/api.UserService/ActivateV1"
	// UserServiceSearchProfilesV1Procedure is the fully-qualified name of the UserService's
	// SearchProfilesV1 RPC.
	UserServiceSearchProfilesV1Procedure = "/api.UserService/SearchProfilesV1"
	// UserServiceEditProfileV1Procedure is the fully-qualified name of the UserService's EditProfileV1
	// RPC.
	UserServiceEditProfileV1Procedure = "/api.UserService/EditProfileV1"
	// UserServiceAccountDeleteV1Procedure is the fully-qualified name of the UserService's
	// AccountDeleteV1 RPC.
	UserServiceAccountDeleteV1Procedure = "/api.UserService/AccountDeleteV1"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	userServiceServiceDescriptor                = api.File_api_user_proto.Services().ByName("UserService")
	userServiceActivateV1MethodDescriptor       = userServiceServiceDescriptor.Methods().ByName("ActivateV1")
	userServiceSearchProfilesV1MethodDescriptor = userServiceServiceDescriptor.Methods().ByName("SearchProfilesV1")
	userServiceEditProfileV1MethodDescriptor    = userServiceServiceDescriptor.Methods().ByName("EditProfileV1")
	userServiceAccountDeleteV1MethodDescriptor  = userServiceServiceDescriptor.Methods().ByName("AccountDeleteV1")
)

// UserServiceClient is a client for the api.UserService service.
type UserServiceClient interface {
	// プロフィール設定/言語設定などの初期設定が完了したら、この API を呼び出してください。
	// ユーザがアクティベートされるまで、ユーザのプロフィールは非公開になります。
	ActivateV1(context.Context, *connect.Request[api.UserServiceActivateV1Request]) (*connect.Response[api.UserServiceActivateV1Response], error)
	// プロフィールを検索します。
	SearchProfilesV1(context.Context, *connect.Request[api.UserServiceSearchProfilesV1Request]) (*connect.Response[api.UserServiceSearchProfilesV1Response], error)
	// プロフィールを編集します。
	EditProfileV1(context.Context, *connect.Request[api.UserServiceEditProfileV1Request]) (*connect.Response[api.UserServiceEditProfileV1Response], error)
	// 退会処理を行います。
	// アカウントは永続的に削除され、復元することはできません。
	AccountDeleteV1(context.Context, *connect.Request[api.UserServiceAccountDeleteV1Request]) (*connect.Response[api.UserServiceAccountDeleteV1Response], error)
}

// NewUserServiceClient constructs a client for the api.UserService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userServiceClient{
		activateV1: connect.NewClient[api.UserServiceActivateV1Request, api.UserServiceActivateV1Response](
			httpClient,
			baseURL+UserServiceActivateV1Procedure,
			connect.WithSchema(userServiceActivateV1MethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		searchProfilesV1: connect.NewClient[api.UserServiceSearchProfilesV1Request, api.UserServiceSearchProfilesV1Response](
			httpClient,
			baseURL+UserServiceSearchProfilesV1Procedure,
			connect.WithSchema(userServiceSearchProfilesV1MethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		editProfileV1: connect.NewClient[api.UserServiceEditProfileV1Request, api.UserServiceEditProfileV1Response](
			httpClient,
			baseURL+UserServiceEditProfileV1Procedure,
			connect.WithSchema(userServiceEditProfileV1MethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		accountDeleteV1: connect.NewClient[api.UserServiceAccountDeleteV1Request, api.UserServiceAccountDeleteV1Response](
			httpClient,
			baseURL+UserServiceAccountDeleteV1Procedure,
			connect.WithSchema(userServiceAccountDeleteV1MethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	activateV1       *connect.Client[api.UserServiceActivateV1Request, api.UserServiceActivateV1Response]
	searchProfilesV1 *connect.Client[api.UserServiceSearchProfilesV1Request, api.UserServiceSearchProfilesV1Response]
	editProfileV1    *connect.Client[api.UserServiceEditProfileV1Request, api.UserServiceEditProfileV1Response]
	accountDeleteV1  *connect.Client[api.UserServiceAccountDeleteV1Request, api.UserServiceAccountDeleteV1Response]
}

// ActivateV1 calls api.UserService.ActivateV1.
func (c *userServiceClient) ActivateV1(ctx context.Context, req *connect.Request[api.UserServiceActivateV1Request]) (*connect.Response[api.UserServiceActivateV1Response], error) {
	return c.activateV1.CallUnary(ctx, req)
}

// SearchProfilesV1 calls api.UserService.SearchProfilesV1.
func (c *userServiceClient) SearchProfilesV1(ctx context.Context, req *connect.Request[api.UserServiceSearchProfilesV1Request]) (*connect.Response[api.UserServiceSearchProfilesV1Response], error) {
	return c.searchProfilesV1.CallUnary(ctx, req)
}

// EditProfileV1 calls api.UserService.EditProfileV1.
func (c *userServiceClient) EditProfileV1(ctx context.Context, req *connect.Request[api.UserServiceEditProfileV1Request]) (*connect.Response[api.UserServiceEditProfileV1Response], error) {
	return c.editProfileV1.CallUnary(ctx, req)
}

// AccountDeleteV1 calls api.UserService.AccountDeleteV1.
func (c *userServiceClient) AccountDeleteV1(ctx context.Context, req *connect.Request[api.UserServiceAccountDeleteV1Request]) (*connect.Response[api.UserServiceAccountDeleteV1Response], error) {
	return c.accountDeleteV1.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the api.UserService service.
type UserServiceHandler interface {
	// プロフィール設定/言語設定などの初期設定が完了したら、この API を呼び出してください。
	// ユーザがアクティベートされるまで、ユーザのプロフィールは非公開になります。
	ActivateV1(context.Context, *connect.Request[api.UserServiceActivateV1Request]) (*connect.Response[api.UserServiceActivateV1Response], error)
	// プロフィールを検索します。
	SearchProfilesV1(context.Context, *connect.Request[api.UserServiceSearchProfilesV1Request]) (*connect.Response[api.UserServiceSearchProfilesV1Response], error)
	// プロフィールを編集します。
	EditProfileV1(context.Context, *connect.Request[api.UserServiceEditProfileV1Request]) (*connect.Response[api.UserServiceEditProfileV1Response], error)
	// 退会処理を行います。
	// アカウントは永続的に削除され、復元することはできません。
	AccountDeleteV1(context.Context, *connect.Request[api.UserServiceAccountDeleteV1Request]) (*connect.Response[api.UserServiceAccountDeleteV1Response], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceActivateV1Handler := connect.NewUnaryHandler(
		UserServiceActivateV1Procedure,
		svc.ActivateV1,
		connect.WithSchema(userServiceActivateV1MethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceSearchProfilesV1Handler := connect.NewUnaryHandler(
		UserServiceSearchProfilesV1Procedure,
		svc.SearchProfilesV1,
		connect.WithSchema(userServiceSearchProfilesV1MethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceEditProfileV1Handler := connect.NewUnaryHandler(
		UserServiceEditProfileV1Procedure,
		svc.EditProfileV1,
		connect.WithSchema(userServiceEditProfileV1MethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceAccountDeleteV1Handler := connect.NewUnaryHandler(
		UserServiceAccountDeleteV1Procedure,
		svc.AccountDeleteV1,
		connect.WithSchema(userServiceAccountDeleteV1MethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceActivateV1Procedure:
			userServiceActivateV1Handler.ServeHTTP(w, r)
		case UserServiceSearchProfilesV1Procedure:
			userServiceSearchProfilesV1Handler.ServeHTTP(w, r)
		case UserServiceEditProfileV1Procedure:
			userServiceEditProfileV1Handler.ServeHTTP(w, r)
		case UserServiceAccountDeleteV1Procedure:
			userServiceAccountDeleteV1Handler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) ActivateV1(context.Context, *connect.Request[api.UserServiceActivateV1Request]) (*connect.Response[api.UserServiceActivateV1Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.UserService.ActivateV1 is not implemented"))
}

func (UnimplementedUserServiceHandler) SearchProfilesV1(context.Context, *connect.Request[api.UserServiceSearchProfilesV1Request]) (*connect.Response[api.UserServiceSearchProfilesV1Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.UserService.SearchProfilesV1 is not implemented"))
}

func (UnimplementedUserServiceHandler) EditProfileV1(context.Context, *connect.Request[api.UserServiceEditProfileV1Request]) (*connect.Response[api.UserServiceEditProfileV1Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.UserService.EditProfileV1 is not implemented"))
}

func (UnimplementedUserServiceHandler) AccountDeleteV1(context.Context, *connect.Request[api.UserServiceAccountDeleteV1Request]) (*connect.Response[api.UserServiceAccountDeleteV1Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.UserService.AccountDeleteV1 is not implemented"))
}
