// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/user.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/averak/hbaas/protobuf/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "api.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceEditProfileV1Procedure is the fully-qualified name of the UserService's EditProfileV1
	// RPC.
	UserServiceEditProfileV1Procedure = "/api.UserService/EditProfileV1"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	userServiceServiceDescriptor             = api.File_api_user_proto.Services().ByName("UserService")
	userServiceEditProfileV1MethodDescriptor = userServiceServiceDescriptor.Methods().ByName("EditProfileV1")
)

// UserServiceClient is a client for the api.UserService service.
type UserServiceClient interface {
	// プロフィール属性はプロダクトによって異なり、汎化が難いためバイナリデータとして扱います。
	// プロダクトごとに、独自のスキーマを定義してください。
	EditProfileV1(context.Context, *connect.Request[api.UserServiceEditProfileV1Request]) (*connect.Response[api.UserServiceEditProfileV1Response], error)
}

// NewUserServiceClient constructs a client for the api.UserService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userServiceClient{
		editProfileV1: connect.NewClient[api.UserServiceEditProfileV1Request, api.UserServiceEditProfileV1Response](
			httpClient,
			baseURL+UserServiceEditProfileV1Procedure,
			connect.WithSchema(userServiceEditProfileV1MethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	editProfileV1 *connect.Client[api.UserServiceEditProfileV1Request, api.UserServiceEditProfileV1Response]
}

// EditProfileV1 calls api.UserService.EditProfileV1.
func (c *userServiceClient) EditProfileV1(ctx context.Context, req *connect.Request[api.UserServiceEditProfileV1Request]) (*connect.Response[api.UserServiceEditProfileV1Response], error) {
	return c.editProfileV1.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the api.UserService service.
type UserServiceHandler interface {
	// プロフィール属性はプロダクトによって異なり、汎化が難いためバイナリデータとして扱います。
	// プロダクトごとに、独自のスキーマを定義してください。
	EditProfileV1(context.Context, *connect.Request[api.UserServiceEditProfileV1Request]) (*connect.Response[api.UserServiceEditProfileV1Response], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceEditProfileV1Handler := connect.NewUnaryHandler(
		UserServiceEditProfileV1Procedure,
		svc.EditProfileV1,
		connect.WithSchema(userServiceEditProfileV1MethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceEditProfileV1Procedure:
			userServiceEditProfileV1Handler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) EditProfileV1(context.Context, *connect.Request[api.UserServiceEditProfileV1Request]) (*connect.Response[api.UserServiceEditProfileV1Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.UserService.EditProfileV1 is not implemented"))
}
