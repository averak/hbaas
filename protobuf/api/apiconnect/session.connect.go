// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/session.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/averak/hbaas/protobuf/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SessionServiceName is the fully-qualified name of the SessionService service.
	SessionServiceName = "api.SessionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SessionServiceAuthorizeV1Procedure is the fully-qualified name of the SessionService's
	// AuthorizeV1 RPC.
	SessionServiceAuthorizeV1Procedure = "/api.SessionService/AuthorizeV1"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	sessionServiceServiceDescriptor           = api.File_api_session_proto.Services().ByName("SessionService")
	sessionServiceAuthorizeV1MethodDescriptor = sessionServiceServiceDescriptor.Methods().ByName("AuthorizeV1")
)

// SessionServiceClient is a client for the api.SessionService service.
type SessionServiceClient interface {
	// ID トークンを検証し、セッションを作成します。
	// サインインとサインアップが統合されており、初回実行時はユーザ作成も同時に行います。
	AuthorizeV1(context.Context, *connect.Request[api.SessionServiceAuthorizeV1Request]) (*connect.Response[api.SessionServiceAuthorizeV1Response], error)
}

// NewSessionServiceClient constructs a client for the api.SessionService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSessionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SessionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sessionServiceClient{
		authorizeV1: connect.NewClient[api.SessionServiceAuthorizeV1Request, api.SessionServiceAuthorizeV1Response](
			httpClient,
			baseURL+SessionServiceAuthorizeV1Procedure,
			connect.WithSchema(sessionServiceAuthorizeV1MethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// sessionServiceClient implements SessionServiceClient.
type sessionServiceClient struct {
	authorizeV1 *connect.Client[api.SessionServiceAuthorizeV1Request, api.SessionServiceAuthorizeV1Response]
}

// AuthorizeV1 calls api.SessionService.AuthorizeV1.
func (c *sessionServiceClient) AuthorizeV1(ctx context.Context, req *connect.Request[api.SessionServiceAuthorizeV1Request]) (*connect.Response[api.SessionServiceAuthorizeV1Response], error) {
	return c.authorizeV1.CallUnary(ctx, req)
}

// SessionServiceHandler is an implementation of the api.SessionService service.
type SessionServiceHandler interface {
	// ID トークンを検証し、セッションを作成します。
	// サインインとサインアップが統合されており、初回実行時はユーザ作成も同時に行います。
	AuthorizeV1(context.Context, *connect.Request[api.SessionServiceAuthorizeV1Request]) (*connect.Response[api.SessionServiceAuthorizeV1Response], error)
}

// NewSessionServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSessionServiceHandler(svc SessionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sessionServiceAuthorizeV1Handler := connect.NewUnaryHandler(
		SessionServiceAuthorizeV1Procedure,
		svc.AuthorizeV1,
		connect.WithSchema(sessionServiceAuthorizeV1MethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.SessionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SessionServiceAuthorizeV1Procedure:
			sessionServiceAuthorizeV1Handler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSessionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSessionServiceHandler struct{}

func (UnimplementedSessionServiceHandler) AuthorizeV1(context.Context, *connect.Request[api.SessionServiceAuthorizeV1Request]) (*connect.Response[api.SessionServiceAuthorizeV1Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.SessionService.AuthorizeV1 is not implemented"))
}
