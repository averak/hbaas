// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/loader_board.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/averak/hbaas/protobuf/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LeaderBoardServiceName is the fully-qualified name of the LeaderBoardService service.
	LeaderBoardServiceName = "api.LeaderBoardService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LeaderBoardServiceGetV1Procedure is the fully-qualified name of the LeaderBoardService's GetV1
	// RPC.
	LeaderBoardServiceGetV1Procedure = "/api.LeaderBoardService/GetV1"
	// LeaderBoardServiceSubmitScoreV1Procedure is the fully-qualified name of the LeaderBoardService's
	// SubmitScoreV1 RPC.
	LeaderBoardServiceSubmitScoreV1Procedure = "/api.LeaderBoardService/SubmitScoreV1"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	leaderBoardServiceServiceDescriptor             = api.File_api_loader_board_proto.Services().ByName("LeaderBoardService")
	leaderBoardServiceGetV1MethodDescriptor         = leaderBoardServiceServiceDescriptor.Methods().ByName("GetV1")
	leaderBoardServiceSubmitScoreV1MethodDescriptor = leaderBoardServiceServiceDescriptor.Methods().ByName("SubmitScoreV1")
)

// LeaderBoardServiceClient is a client for the api.LeaderBoardService service.
type LeaderBoardServiceClient interface {
	GetV1(context.Context, *connect.Request[api.LeaderBoardServiceGetV1Request]) (*connect.Response[api.LeaderBoardServiceGetV1Response], error)
	SubmitScoreV1(context.Context, *connect.Request[api.LeaderBoardServiceSubmitScoreV1Request]) (*connect.Response[api.LeaderBoardServiceSubmitScoreV1Response], error)
}

// NewLeaderBoardServiceClient constructs a client for the api.LeaderBoardService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLeaderBoardServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LeaderBoardServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &leaderBoardServiceClient{
		getV1: connect.NewClient[api.LeaderBoardServiceGetV1Request, api.LeaderBoardServiceGetV1Response](
			httpClient,
			baseURL+LeaderBoardServiceGetV1Procedure,
			connect.WithSchema(leaderBoardServiceGetV1MethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		submitScoreV1: connect.NewClient[api.LeaderBoardServiceSubmitScoreV1Request, api.LeaderBoardServiceSubmitScoreV1Response](
			httpClient,
			baseURL+LeaderBoardServiceSubmitScoreV1Procedure,
			connect.WithSchema(leaderBoardServiceSubmitScoreV1MethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// leaderBoardServiceClient implements LeaderBoardServiceClient.
type leaderBoardServiceClient struct {
	getV1         *connect.Client[api.LeaderBoardServiceGetV1Request, api.LeaderBoardServiceGetV1Response]
	submitScoreV1 *connect.Client[api.LeaderBoardServiceSubmitScoreV1Request, api.LeaderBoardServiceSubmitScoreV1Response]
}

// GetV1 calls api.LeaderBoardService.GetV1.
func (c *leaderBoardServiceClient) GetV1(ctx context.Context, req *connect.Request[api.LeaderBoardServiceGetV1Request]) (*connect.Response[api.LeaderBoardServiceGetV1Response], error) {
	return c.getV1.CallUnary(ctx, req)
}

// SubmitScoreV1 calls api.LeaderBoardService.SubmitScoreV1.
func (c *leaderBoardServiceClient) SubmitScoreV1(ctx context.Context, req *connect.Request[api.LeaderBoardServiceSubmitScoreV1Request]) (*connect.Response[api.LeaderBoardServiceSubmitScoreV1Response], error) {
	return c.submitScoreV1.CallUnary(ctx, req)
}

// LeaderBoardServiceHandler is an implementation of the api.LeaderBoardService service.
type LeaderBoardServiceHandler interface {
	GetV1(context.Context, *connect.Request[api.LeaderBoardServiceGetV1Request]) (*connect.Response[api.LeaderBoardServiceGetV1Response], error)
	SubmitScoreV1(context.Context, *connect.Request[api.LeaderBoardServiceSubmitScoreV1Request]) (*connect.Response[api.LeaderBoardServiceSubmitScoreV1Response], error)
}

// NewLeaderBoardServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLeaderBoardServiceHandler(svc LeaderBoardServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	leaderBoardServiceGetV1Handler := connect.NewUnaryHandler(
		LeaderBoardServiceGetV1Procedure,
		svc.GetV1,
		connect.WithSchema(leaderBoardServiceGetV1MethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	leaderBoardServiceSubmitScoreV1Handler := connect.NewUnaryHandler(
		LeaderBoardServiceSubmitScoreV1Procedure,
		svc.SubmitScoreV1,
		connect.WithSchema(leaderBoardServiceSubmitScoreV1MethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.LeaderBoardService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LeaderBoardServiceGetV1Procedure:
			leaderBoardServiceGetV1Handler.ServeHTTP(w, r)
		case LeaderBoardServiceSubmitScoreV1Procedure:
			leaderBoardServiceSubmitScoreV1Handler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLeaderBoardServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLeaderBoardServiceHandler struct{}

func (UnimplementedLeaderBoardServiceHandler) GetV1(context.Context, *connect.Request[api.LeaderBoardServiceGetV1Request]) (*connect.Response[api.LeaderBoardServiceGetV1Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.LeaderBoardService.GetV1 is not implemented"))
}

func (UnimplementedLeaderBoardServiceHandler) SubmitScoreV1(context.Context, *connect.Request[api.LeaderBoardServiceSubmitScoreV1Request]) (*connect.Response[api.LeaderBoardServiceSubmitScoreV1Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.LeaderBoardService.SubmitScoreV1 is not implemented"))
}
