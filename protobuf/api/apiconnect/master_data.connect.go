// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/master_data.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/averak/hbaas/protobuf/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MasterDataServiceName is the fully-qualified name of the MasterDataService service.
	MasterDataServiceName = "api.MasterDataService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MasterDataServiceGetV1Procedure is the fully-qualified name of the MasterDataService's GetV1 RPC.
	MasterDataServiceGetV1Procedure = "/api.MasterDataService/GetV1"
	// MasterDataServiceGetRevisionV1Procedure is the fully-qualified name of the MasterDataService's
	// GetRevisionV1 RPC.
	MasterDataServiceGetRevisionV1Procedure = "/api.MasterDataService/GetRevisionV1"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	masterDataServiceServiceDescriptor             = api.File_api_master_data_proto.Services().ByName("MasterDataService")
	masterDataServiceGetV1MethodDescriptor         = masterDataServiceServiceDescriptor.Methods().ByName("GetV1")
	masterDataServiceGetRevisionV1MethodDescriptor = masterDataServiceServiceDescriptor.Methods().ByName("GetRevisionV1")
)

// MasterDataServiceClient is a client for the api.MasterDataService service.
type MasterDataServiceClient interface {
	// 現在アクティブなマスターデータを取得します。
	GetV1(context.Context, *connect.Request[api.MasterDataServiceGetV1Request]) (*connect.Response[api.MasterDataServiceGetV1Response], error)
	// 現在アクティブなマスターリビジョンを取得します。
	GetRevisionV1(context.Context, *connect.Request[api.MasterDataServiceGetRevisionV1Request]) (*connect.Response[api.MasterDataServiceGetRevisionV1Response], error)
}

// NewMasterDataServiceClient constructs a client for the api.MasterDataService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMasterDataServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MasterDataServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &masterDataServiceClient{
		getV1: connect.NewClient[api.MasterDataServiceGetV1Request, api.MasterDataServiceGetV1Response](
			httpClient,
			baseURL+MasterDataServiceGetV1Procedure,
			connect.WithSchema(masterDataServiceGetV1MethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRevisionV1: connect.NewClient[api.MasterDataServiceGetRevisionV1Request, api.MasterDataServiceGetRevisionV1Response](
			httpClient,
			baseURL+MasterDataServiceGetRevisionV1Procedure,
			connect.WithSchema(masterDataServiceGetRevisionV1MethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// masterDataServiceClient implements MasterDataServiceClient.
type masterDataServiceClient struct {
	getV1         *connect.Client[api.MasterDataServiceGetV1Request, api.MasterDataServiceGetV1Response]
	getRevisionV1 *connect.Client[api.MasterDataServiceGetRevisionV1Request, api.MasterDataServiceGetRevisionV1Response]
}

// GetV1 calls api.MasterDataService.GetV1.
func (c *masterDataServiceClient) GetV1(ctx context.Context, req *connect.Request[api.MasterDataServiceGetV1Request]) (*connect.Response[api.MasterDataServiceGetV1Response], error) {
	return c.getV1.CallUnary(ctx, req)
}

// GetRevisionV1 calls api.MasterDataService.GetRevisionV1.
func (c *masterDataServiceClient) GetRevisionV1(ctx context.Context, req *connect.Request[api.MasterDataServiceGetRevisionV1Request]) (*connect.Response[api.MasterDataServiceGetRevisionV1Response], error) {
	return c.getRevisionV1.CallUnary(ctx, req)
}

// MasterDataServiceHandler is an implementation of the api.MasterDataService service.
type MasterDataServiceHandler interface {
	// 現在アクティブなマスターデータを取得します。
	GetV1(context.Context, *connect.Request[api.MasterDataServiceGetV1Request]) (*connect.Response[api.MasterDataServiceGetV1Response], error)
	// 現在アクティブなマスターリビジョンを取得します。
	GetRevisionV1(context.Context, *connect.Request[api.MasterDataServiceGetRevisionV1Request]) (*connect.Response[api.MasterDataServiceGetRevisionV1Response], error)
}

// NewMasterDataServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMasterDataServiceHandler(svc MasterDataServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	masterDataServiceGetV1Handler := connect.NewUnaryHandler(
		MasterDataServiceGetV1Procedure,
		svc.GetV1,
		connect.WithSchema(masterDataServiceGetV1MethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	masterDataServiceGetRevisionV1Handler := connect.NewUnaryHandler(
		MasterDataServiceGetRevisionV1Procedure,
		svc.GetRevisionV1,
		connect.WithSchema(masterDataServiceGetRevisionV1MethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.MasterDataService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MasterDataServiceGetV1Procedure:
			masterDataServiceGetV1Handler.ServeHTTP(w, r)
		case MasterDataServiceGetRevisionV1Procedure:
			masterDataServiceGetRevisionV1Handler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMasterDataServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMasterDataServiceHandler struct{}

func (UnimplementedMasterDataServiceHandler) GetV1(context.Context, *connect.Request[api.MasterDataServiceGetV1Request]) (*connect.Response[api.MasterDataServiceGetV1Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.MasterDataService.GetV1 is not implemented"))
}

func (UnimplementedMasterDataServiceHandler) GetRevisionV1(context.Context, *connect.Request[api.MasterDataServiceGetRevisionV1Request]) (*connect.Response[api.MasterDataServiceGetRevisionV1Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.MasterDataService.GetRevisionV1 is not implemented"))
}
