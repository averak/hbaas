// Code generated by github.com/averak/hbaas/cmd/protoc-gen-hbaas-server. DO NOT EDIT.
// source: api/global_kvs.proto

package api

import (
	connect "connectrpc.com/connect"
	context "context"
	connect1 "github.com/averak/hbaas/app/infrastructure/connect"
	advice "github.com/averak/hbaas/app/infrastructure/connect/advice"
	custom_option "github.com/averak/hbaas/protobuf/custom_option"
	proto "google.golang.org/protobuf/proto"
)

// グローバル KVS 機能とは、任意のデータを格納できる汎用的な Key-Value ストアです。
// このデータは全プレイヤーで共有され、誰でも読み書きが可能です。
type hbaas_GlobalKVSServiceHandler interface {
	// KVS のエントリを検索します。
	// ただし、検索条件が空の場合は空リストを返します。
	GetV1(ctx context.Context, req *advice.Request[*GlobalKVSServiceGetV1Request]) (*GlobalKVSServiceGetV1Response, error)

	// KVS にエントリを登録します。
	// エントリの作成、更新、削除を行うことが可能で、value が空のエントリは削除されます。
	SetV1(ctx context.Context, req *advice.Request[*GlobalKVSServiceSetV1Request]) (*GlobalKVSServiceSetV1Response, error)
	SetV1Errors(errs *GlobalKVSServiceSetV1Errors)
}

type GlobalKVSServiceSetV1Errors struct {
	// The value bytes must be less than or equal to 1KiB.
	ILLEGAL_ARGUMENT *advice.MethodErrDefinition

	causes map[error]*advice.MethodErrDefinition
}

func (e *GlobalKVSServiceSetV1Errors) Map(from error, to *advice.MethodErrDefinition) {
	e.causes[from] = to
}

func NewGlobalKVSServiceHandler(handler hbaas_GlobalKVSServiceHandler, adv advice.Advice) hbaas_GlobalKVSServiceHandlerImpl {
	service := File_api_global_kvs_proto.Services().ByName("GlobalKVSService")
	causes := [2]map[error]*advice.MethodErrDefinition{{}, {}}
	methodOpts := [2]*advice.MethodOption{}
	for i, m := 0, service.Methods(); i < 2; i++ {
		methodOpts[i] = proto.GetExtension(m.Get(i).Options(), custom_option.E_MethodOption).(*advice.MethodOption)
	}
	handler.SetV1Errors(&GlobalKVSServiceSetV1Errors{
		ILLEGAL_ARGUMENT: methodOpts[1].GetMethodErrorDefinitions()[0],
		causes:           causes[1],
	})
	methodInfo := [2]*advice.MethodInfo{
		advice.NewMethodInfo(methodOpts[0], causes[0]),
		advice.NewMethodInfo(methodOpts[1], causes[1]),
	}
	return hbaas_GlobalKVSServiceHandlerImpl{handler: handler, advice: adv, methodInfo: methodInfo}
}

type hbaas_GlobalKVSServiceHandlerImpl struct {
	handler    hbaas_GlobalKVSServiceHandler
	advice     advice.Advice
	methodInfo [2]*advice.MethodInfo
}

func (h hbaas_GlobalKVSServiceHandlerImpl) GetV1(ctx context.Context, req *connect.Request[GlobalKVSServiceGetV1Request]) (*connect.Response[GlobalKVSServiceGetV1Response], error) {
	res, err := connect1.Execute(ctx, req.Msg, req.Header(), h.methodInfo[0], h.handler.GetV1, h.advice)
	if err != nil {
		return nil, err
	}
	return connect.NewResponse(res), nil
}

func (h hbaas_GlobalKVSServiceHandlerImpl) SetV1(ctx context.Context, req *connect.Request[GlobalKVSServiceSetV1Request]) (*connect.Response[GlobalKVSServiceSetV1Response], error) {
	res, err := connect1.Execute(ctx, req.Msg, req.Header(), h.methodInfo[1], h.handler.SetV1, h.advice)
	if err != nil {
		return nil, err
	}
	return connect.NewResponse(res), nil
}
