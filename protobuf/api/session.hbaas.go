// Code generated by github.com/averak/hbaas/cmd/protoc-gen-hbaas-server. DO NOT EDIT.
// source: api/session.proto

package api

import (
	connect "connectrpc.com/connect"
	context "context"
	connect1 "github.com/averak/hbaas/app/infrastructure/connect"
	advice "github.com/averak/hbaas/app/infrastructure/connect/advice"
	custom_option "github.com/averak/hbaas/protobuf/custom_option"
	proto "google.golang.org/protobuf/proto"
)

type hbaas_SessionServiceHandler interface {
	// ID トークンを検証し、セッションを作成します。
	// サインインとサインアップが統合されており、初回実行時はユーザ作成も同時に行います。
	AuthorizeV1(ctx context.Context, req *advice.Request[*SessionServiceAuthorizeV1Request]) (*SessionServiceAuthorizeV1Response, error)
	AuthorizeV1Errors(errs *SessionServiceAuthorizeV1Errors)
}

type SessionServiceAuthorizeV1Errors struct {
	// ID token is invalid, please re-authenticate and try again.
	ILLEGAL_ARGUMENT *advice.MethodErrDefinition
	// ID token is expired, please re-authenticate and try again.
	ID_TOKEN_EXPIRED *advice.MethodErrDefinition

	causes map[error]*advice.MethodErrDefinition
}

func (e *SessionServiceAuthorizeV1Errors) Map(from error, to *advice.MethodErrDefinition) {
	e.causes[from] = to
}

func NewSessionServiceHandler(handler hbaas_SessionServiceHandler, adv advice.Advice) hbaas_SessionServiceHandlerImpl {
	service := File_api_session_proto.Services().ByName("SessionService")
	causes := [1]map[error]*advice.MethodErrDefinition{{}}
	methodOpts := [1]*advice.MethodOption{}
	for i, m := 0, service.Methods(); i < 1; i++ {
		methodOpts[i] = proto.GetExtension(m.Get(i).Options(), custom_option.E_MethodOption).(*advice.MethodOption)
	}
	handler.AuthorizeV1Errors(&SessionServiceAuthorizeV1Errors{
		ILLEGAL_ARGUMENT: methodOpts[0].GetMethodErrorDefinitions()[0],
		ID_TOKEN_EXPIRED: methodOpts[0].GetMethodErrorDefinitions()[1],
		causes:           causes[0],
	})
	methodInfo := [1]*advice.MethodInfo{
		advice.NewMethodInfo(methodOpts[0], causes[0]),
	}
	return hbaas_SessionServiceHandlerImpl{handler: handler, advice: adv, methodInfo: methodInfo}
}

type hbaas_SessionServiceHandlerImpl struct {
	handler    hbaas_SessionServiceHandler
	advice     advice.Advice
	methodInfo [1]*advice.MethodInfo
}

func (h hbaas_SessionServiceHandlerImpl) AuthorizeV1(ctx context.Context, req *connect.Request[SessionServiceAuthorizeV1Request]) (*connect.Response[SessionServiceAuthorizeV1Response], error) {
	res, err := connect1.Execute(ctx, req.Msg, req.Header(), h.methodInfo[0], h.handler.AuthorizeV1, h.advice)
	if err != nil {
		return nil, err
	}
	return connect.NewResponse(res), nil
}
