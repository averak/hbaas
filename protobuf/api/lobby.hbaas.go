// Code generated by github.com/averak/hbaas/cmd/protoc-gen-hbaas-server. DO NOT EDIT.
// source: api/lobby.proto

package api

import (
	connect "connectrpc.com/connect"
	context "context"
	connect1 "github.com/averak/hbaas/app/infrastructure/connect"
	advice "github.com/averak/hbaas/app/infrastructure/connect/advice"
	custom_option "github.com/averak/hbaas/protobuf/custom_option"
	proto "google.golang.org/protobuf/proto"
)

// ロビー機能は、WebRTC を利用したリアルタイム通信のためのルームを提供します。
// リアルタイム通信は SkyWay で行いますが、SkyWay に接続する前段の認証、アクセス制御、その他メタデータ管理を行います。
//
// ## SkyWay
// アプリケーションに WebRTC を組み込むためには、SkyWay SDK が必要になります。
// https://skyway.ntt.com/ja/docs/
//
// ## ルーム
// HBaaS のルームは、SkyWay のルームと1:1の関係にあります。
// ただし、それぞれ別のID体系を持ち、異なる概念であることに注意してください。
type hbaas_LobbyServiceHandler interface {
	SearchRoomsV1(ctx context.Context, req *advice.Request[*LobbyServiceSearchRoomsV1Request]) (*LobbyServiceSearchRoomsV1Response, error)

	CreateRoomV1(ctx context.Context, req *advice.Request[*LobbyServiceCreateRoomV1Request]) (*LobbyServiceCreateRoomV1Response, error)

	DeleteRoomV1(ctx context.Context, req *advice.Request[*LobbyServiceDeleteRoomV1Request]) (*LobbyServiceDeleteRoomV1Response, error)

	JoinRoomV1(ctx context.Context, req *advice.Request[*LobbyServiceJoinRoomV1Request]) (*LobbyServiceJoinRoomV1Response, error)
}

func NewLobbyServiceHandler(handler hbaas_LobbyServiceHandler, adv advice.Advice) hbaas_LobbyServiceHandlerImpl {
	service := File_api_lobby_proto.Services().ByName("LobbyService")
	causes := [4]map[error]*advice.MethodErrDefinition{{}, {}, {}, {}}
	methodOpts := [4]*advice.MethodOption{}
	for i, m := 0, service.Methods(); i < 4; i++ {
		methodOpts[i] = proto.GetExtension(m.Get(i).Options(), custom_option.E_MethodOption).(*advice.MethodOption)
	}
	methodInfo := [4]*advice.MethodInfo{
		advice.NewMethodInfo(methodOpts[0], causes[0]),
		advice.NewMethodInfo(methodOpts[1], causes[1]),
		advice.NewMethodInfo(methodOpts[2], causes[2]),
		advice.NewMethodInfo(methodOpts[3], causes[3]),
	}
	return hbaas_LobbyServiceHandlerImpl{handler: handler, advice: adv, methodInfo: methodInfo}
}

type hbaas_LobbyServiceHandlerImpl struct {
	handler    hbaas_LobbyServiceHandler
	advice     advice.Advice
	methodInfo [4]*advice.MethodInfo
}

func (h hbaas_LobbyServiceHandlerImpl) SearchRoomsV1(ctx context.Context, req *connect.Request[LobbyServiceSearchRoomsV1Request]) (*connect.Response[LobbyServiceSearchRoomsV1Response], error) {
	res, err := connect1.Execute(ctx, req.Msg, req.Header(), h.methodInfo[0], h.handler.SearchRoomsV1, h.advice)
	if err != nil {
		return nil, err
	}
	return connect.NewResponse(res), nil
}

func (h hbaas_LobbyServiceHandlerImpl) CreateRoomV1(ctx context.Context, req *connect.Request[LobbyServiceCreateRoomV1Request]) (*connect.Response[LobbyServiceCreateRoomV1Response], error) {
	res, err := connect1.Execute(ctx, req.Msg, req.Header(), h.methodInfo[1], h.handler.CreateRoomV1, h.advice)
	if err != nil {
		return nil, err
	}
	return connect.NewResponse(res), nil
}

func (h hbaas_LobbyServiceHandlerImpl) DeleteRoomV1(ctx context.Context, req *connect.Request[LobbyServiceDeleteRoomV1Request]) (*connect.Response[LobbyServiceDeleteRoomV1Response], error) {
	res, err := connect1.Execute(ctx, req.Msg, req.Header(), h.methodInfo[2], h.handler.DeleteRoomV1, h.advice)
	if err != nil {
		return nil, err
	}
	return connect.NewResponse(res), nil
}

func (h hbaas_LobbyServiceHandlerImpl) JoinRoomV1(ctx context.Context, req *connect.Request[LobbyServiceJoinRoomV1Request]) (*connect.Response[LobbyServiceJoinRoomV1Response], error) {
	res, err := connect1.Execute(ctx, req.Msg, req.Header(), h.methodInfo[3], h.handler.JoinRoomV1, h.advice)
	if err != nil {
		return nil, err
	}
	return connect.NewResponse(res), nil
}
