// Code generated by github.com/averak/hbaas/cmd/protoc-gen-hbaas-server. DO NOT EDIT.
// source: api/loader_board.proto

package api

import (
	connect "connectrpc.com/connect"
	context "context"
	connect1 "github.com/averak/hbaas/app/infrastructure/connect"
	advice "github.com/averak/hbaas/app/infrastructure/connect/advice"
	custom_option "github.com/averak/hbaas/protobuf/custom_option"
	proto "google.golang.org/protobuf/proto"
)

// リーダーボード機能は、イベントごとにエンティティのスコアを集計し、リアルタイムにランキングを計算します。
// なお、エンティティとはスコア計測対象のオブジェクトを指します。これには、プレイヤーやブログ記事などが該当します。
//
// ## イベント管理
// リーダーボードは、イベントごとに作成されます。
// 一般的にはイベントはマスターデータや管理者ツールから作成されますが、本システムは SubmitScoreV1 でイベントが存在しない場合に自動的に作成します。
//
// ## イベントIDの命名規則
// イベントの検索機能は提供されないので、規則性を持つナチュラルキーをイベントIDに設定することを推奨します。
// 以下のように、半永久的なイベントには静的な値を、期間限定のイベントには期間を含めると良いでしょう。
//   - blog-ranking:all
//   - blog-ranking:daily:2000-01-01
//
// ## スコア
// スコアは、エンティティごとに一意です。エンティティが複数回スコアを提出した場合、最新のスコアが採用されます。
// ユーザごとに複数スコアを登録したい場合は `user01:2000-01-01` のようなエンティティIDを設計してください。
type hbaas_LeaderBoardServiceHandler interface {
	GetV1(ctx context.Context, req *advice.Request[*LeaderBoardServiceGetV1Request]) (*LeaderBoardServiceGetV1Response, error)

	SubmitScoreV1(ctx context.Context, req *advice.Request[*LeaderBoardServiceSubmitScoreV1Request]) (*LeaderBoardServiceSubmitScoreV1Response, error)
}

func NewLeaderBoardServiceHandler(handler hbaas_LeaderBoardServiceHandler, adv advice.Advice) hbaas_LeaderBoardServiceHandlerImpl {
	service := File_api_loader_board_proto.Services().ByName("LeaderBoardService")
	causes := [2]map[error]*advice.MethodErrDefinition{{}, {}}
	methodOpts := [2]*advice.MethodOption{}
	for i, m := 0, service.Methods(); i < 2; i++ {
		methodOpts[i] = proto.GetExtension(m.Get(i).Options(), custom_option.E_MethodOption).(*advice.MethodOption)
	}
	methodInfo := [2]*advice.MethodInfo{
		advice.NewMethodInfo(methodOpts[0], causes[0]),
		advice.NewMethodInfo(methodOpts[1], causes[1]),
	}
	return hbaas_LeaderBoardServiceHandlerImpl{handler: handler, advice: adv, methodInfo: methodInfo}
}

type hbaas_LeaderBoardServiceHandlerImpl struct {
	handler    hbaas_LeaderBoardServiceHandler
	advice     advice.Advice
	methodInfo [2]*advice.MethodInfo
}

func (h hbaas_LeaderBoardServiceHandlerImpl) GetV1(ctx context.Context, req *connect.Request[LeaderBoardServiceGetV1Request]) (*connect.Response[LeaderBoardServiceGetV1Response], error) {
	res, err := connect1.Execute(ctx, req.Msg, req.Header(), h.methodInfo[0], h.handler.GetV1, h.advice)
	if err != nil {
		return nil, err
	}
	return connect.NewResponse(res), nil
}

func (h hbaas_LeaderBoardServiceHandlerImpl) SubmitScoreV1(ctx context.Context, req *connect.Request[LeaderBoardServiceSubmitScoreV1Request]) (*connect.Response[LeaderBoardServiceSubmitScoreV1Response], error) {
	res, err := connect1.Execute(ctx, req.Msg, req.Header(), h.methodInfo[1], h.handler.SubmitScoreV1, h.advice)
	if err != nil {
		return nil, err
	}
	return connect.NewResponse(res), nil
}
