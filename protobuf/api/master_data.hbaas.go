// Code generated by github.com/averak/hbaas/cmd/protoc-gen-hbaas-server. DO NOT EDIT.
// source: api/master_data.proto

package api

import (
	connect "connectrpc.com/connect"
	context "context"
	connect1 "github.com/averak/hbaas/app/infrastructure/connect"
	advice "github.com/averak/hbaas/app/infrastructure/connect/advice"
	custom_option "github.com/averak/hbaas/protobuf/custom_option"
	proto "google.golang.org/protobuf/proto"
)

type hbaas_MasterDataServiceHandler interface {
	// 現在アクティブなマスターデータを取得します。
	GetV1(ctx context.Context, req *advice.Request[*MasterDataServiceGetV1Request]) (*MasterDataServiceGetV1Response, error)
	GetV1Errors(errs *MasterDataServiceGetV1Errors)

	// 現在アクティブなマスターリビジョンを取得します。
	GetRevisionV1(ctx context.Context, req *advice.Request[*MasterDataServiceGetRevisionV1Request]) (*MasterDataServiceGetRevisionV1Response, error)
	GetRevisionV1Errors(errs *MasterDataServiceGetRevisionV1Errors)
}

type MasterDataServiceGetV1Errors struct {
	// The active master data is not found.
	RESOURCE_NOT_FOUND *advice.MethodErrDefinition

	causes map[error]*advice.MethodErrDefinition
}

func (e *MasterDataServiceGetV1Errors) Map(from error, to *advice.MethodErrDefinition) {
	e.causes[from] = to
}

type MasterDataServiceGetRevisionV1Errors struct {
	// The active revision is not found.
	RESOURCE_NOT_FOUND *advice.MethodErrDefinition

	causes map[error]*advice.MethodErrDefinition
}

func (e *MasterDataServiceGetRevisionV1Errors) Map(from error, to *advice.MethodErrDefinition) {
	e.causes[from] = to
}

func NewMasterDataServiceHandler(handler hbaas_MasterDataServiceHandler, adv advice.Advice) hbaas_MasterDataServiceHandlerImpl {
	service := File_api_master_data_proto.Services().ByName("MasterDataService")
	causes := [2]map[error]*advice.MethodErrDefinition{{}, {}}
	methodOpts := [2]*advice.MethodOption{}
	for i, m := 0, service.Methods(); i < 2; i++ {
		methodOpts[i] = proto.GetExtension(m.Get(i).Options(), custom_option.E_MethodOption).(*advice.MethodOption)
	}
	handler.GetV1Errors(&MasterDataServiceGetV1Errors{
		RESOURCE_NOT_FOUND: methodOpts[0].GetMethodErrorDefinitions()[0],
		causes:             causes[0],
	})
	handler.GetRevisionV1Errors(&MasterDataServiceGetRevisionV1Errors{
		RESOURCE_NOT_FOUND: methodOpts[1].GetMethodErrorDefinitions()[0],
		causes:             causes[1],
	})
	methodInfo := [2]*advice.MethodInfo{
		advice.NewMethodInfo(methodOpts[0], causes[0]),
		advice.NewMethodInfo(methodOpts[1], causes[1]),
	}
	return hbaas_MasterDataServiceHandlerImpl{handler: handler, advice: adv, methodInfo: methodInfo}
}

type hbaas_MasterDataServiceHandlerImpl struct {
	handler    hbaas_MasterDataServiceHandler
	advice     advice.Advice
	methodInfo [2]*advice.MethodInfo
}

func (h hbaas_MasterDataServiceHandlerImpl) GetV1(ctx context.Context, req *connect.Request[MasterDataServiceGetV1Request]) (*connect.Response[MasterDataServiceGetV1Response], error) {
	res, err := connect1.Execute(ctx, req.Msg, req.Header(), h.methodInfo[0], h.handler.GetV1, h.advice)
	if err != nil {
		return nil, err
	}
	return connect.NewResponse(res), nil
}

func (h hbaas_MasterDataServiceHandlerImpl) GetRevisionV1(ctx context.Context, req *connect.Request[MasterDataServiceGetRevisionV1Request]) (*connect.Response[MasterDataServiceGetRevisionV1Response], error) {
	res, err := connect1.Execute(ctx, req.Msg, req.Header(), h.methodInfo[1], h.handler.GetRevisionV1, h.advice)
	if err != nil {
		return nil, err
	}
	return connect.NewResponse(res), nil
}
